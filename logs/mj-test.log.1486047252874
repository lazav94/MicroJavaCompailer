INFO  15:53:09,084 - Compiling source file: D:\MEGA\PP1 Domaci\project workspace\ProjectRework\test\lex_test_all.mj
INFO  15:53:09,099 - #2 program
INFO  15:53:09,100 - #48 Program
INFO  15:53:09,100 - #4 class
INFO  15:53:09,100 - #48 A
INFO  15:53:09,101 - #42 {
INFO  15:53:09,101 - #50 'a'
INFO  15:53:09,101 - #48 int
INFO  15:53:09,101 - #48 test_method
INFO  15:53:09,101 - #40 (
INFO  15:53:09,102 - #48 int
INFO  15:53:09,102 - #48 a
INFO  15:53:09,102 - #41 )
INFO  15:53:09,102 - #42 {
INFO  15:53:09,102 - #13 for
INFO  15:53:09,103 - #40 (
INFO  15:53:09,103 - #48 int
INFO  15:53:09,103 - #48 i
INFO  15:53:09,103 - #17 =
INFO  15:53:09,104 - #47 0
INFO  15:53:09,104 - #38 ;
INFO  15:53:09,104 - #48 i
INFO  15:53:09,105 - #27 <
INFO  15:53:09,105 - #47 5
INFO  15:53:09,105 - #38 ;
INFO  15:53:09,106 - #48 i
INFO  15:53:09,106 - #36 ++
INFO  15:53:09,106 - #41 )
INFO  15:53:09,106 - #42 {
INFO  15:53:09,106 - #48 x
INFO  15:53:09,106 - #17 =
INFO  15:53:09,106 - #8 new
INFO  15:53:09,107 - #48 int
INFO  15:53:09,107 - #44 [
INFO  15:53:09,107 - #47 5
INFO  15:53:09,107 - #45 ]
INFO  15:53:09,107 - #38 ;
INFO  15:53:09,108 - #48 a
INFO  15:53:09,108 - #46 .
INFO  15:53:09,108 - #48 x
INFO  15:53:09,108 - #37 --
INFO  15:53:09,108 - #17 =
INFO  15:53:09,109 - #47 5
INFO  15:53:09,109 - #38 ;
INFO  15:53:09,109 - #7 if
INFO  15:53:09,109 - #40 (
INFO  15:53:09,109 - #48 i
INFO  15:53:09,110 - #27 <
INFO  15:53:09,110 - #47 5
INFO  15:53:09,110 - #41 )
INFO  15:53:09,110 - #42 {
INFO  15:53:09,110 - #15 continue
INFO  15:53:09,110 - #38 ;
INFO  15:53:09,111 - #43 }
INFO  15:53:09,111 - #5 else
INFO  15:53:09,111 - #3 break
INFO  15:53:09,111 - #38 ;
INFO  15:53:09,111 - #9 print
INFO  15:53:09,112 - #40 (
INFO  15:53:09,112 - #48 Idemo
INFO  15:53:09,112 - #41 )
INFO  15:53:09,112 - #38 ;
INFO  15:53:09,115 - #43 }
INFO  15:53:09,115 - #11 return
INFO  15:53:09,116 - #47 0
INFO  15:53:09,116 - #38 ;
INFO  15:53:09,116 - #43 }
INFO  15:53:09,116 - #43 }
INFO  15:53:09,116 - #48 laza
ERROR 15:53:09,117 - LEKSICKA: (19) [7] Symbol: !
ERROR 15:53:09,117 - LEKSICKA: (19) 	Symbol: !
ERROR 15:53:09,118 - LEKSICKA: (19) 	Symbol: !
INFO  15:53:09,118 - #48 dsfasf
ERROR 15:53:09,118 - LEKSICKA: (19) 	Symbol: ^
INFO  15:53:09,118 - #48 int
INFO  15:53:09,118 - #48 x
INFO  15:53:09,118 - #44 [
INFO  15:53:09,119 - #45 ]
INFO  15:53:09,119 - #39 ,
INFO  15:53:09,119 - #48 y
INFO  15:53:09,119 - #44 [
INFO  15:53:09,119 - #45 ]
INFO  15:53:09,119 - #38 ;
INFO  15:53:09,119 - #20 *
INFO  15:53:09,120 - #21 /
INFO  15:53:09,120 - #22 %
INFO  15:53:09,120 - #23 ==
INFO  15:53:09,120 - #24 !=
INFO  15:53:09,120 - #25 >
INFO  15:53:09,120 - #26 >=
INFO  15:53:09,121 - #27 <
INFO  15:53:09,121 - #28 <=
INFO  15:53:09,121 - #29 &&
INFO  15:53:09,121 - #30 ||
INFO  15:53:09,122 - #17 =
INFO  15:53:09,122 - #31 +=
INFO  15:53:09,122 - #32 -=
INFO  15:53:09,122 - #33 *=
INFO  15:53:09,122 - #34 /=
INFO  15:53:09,123 - #35 %=
INFO  15:53:09,123 - #18 +
INFO  15:53:09,123 - #19 -
INFO  15:53:09,123 - #6 const
INFO  15:53:09,123 - #48 int
INFO  15:53:09,123 - #48 pi
INFO  15:53:09,124 - #17 =
INFO  15:53:09,124 - #47 3
INFO  15:53:09,124 - #39 ,
INFO  15:53:09,124 - #48 e
INFO  15:53:09,124 - #17 =
INFO  15:53:09,125 - #47 2
INFO  15:53:09,126 - #38 ;
ERROR 15:53:09,126 - LEKSICKA: (24) [5] Symbol: ^
ERROR 15:53:09,126 - LEKSICKA: (24) 	Symbol: ^
ERROR 15:53:09,126 - LEKSICKA: (25) [2] Symbol: ^
INFO  15:53:09,127 - #20 *
INFO  15:53:09,127 - #16 static
INFO  15:53:09,127 - #48 nesto
INFO  15:53:09,127 - #17 =
INFO  15:53:09,127 - #47 565
INFO  15:53:09,127 - #38 ;
INFO  15:53:09,128 - #48 int
INFO  15:53:09,128 - #48 ii
INFO  15:53:09,128 - #17 =
INFO  15:53:09,128 - #49 true
INFO  15:53:09,128 - #38 ;
INFO  15:53:09,128 - #48 ii
INFO  15:53:09,129 - #17 =
INFO  15:53:09,129 - #49 false
INFO  15:53:09,129 - #38 ;
INFO  15:53:09,129 - #48 ii
INFO  15:53:09,129 - #39 ,
INFO  15:53:09,129 - #48 i
INFO  15:53:09,129 - #38 ;
INFO  15:53:09,130 - #4 class
INFO  15:53:09,130 - #48 B
INFO  15:53:09,130 - #14 extends
INFO  15:53:09,130 - #48 A
INFO  15:53:09,130 - #42 {
INFO  15:53:09,131 - #12 void
INFO  15:53:09,131 - #48 main
INFO  15:53:09,131 - #40 (
INFO  15:53:09,131 - #41 )
INFO  15:53:09,134 - #48 A
INFO  15:53:09,134 - #48 a
INFO  15:53:09,135 - #38 ;
INFO  15:53:09,137 - #48 C
INFO  15:53:09,137 - #48 c
INFO  15:53:09,137 - #38 ;
INFO  15:53:09,138 - #48 int
INFO  15:53:09,138 - #48 i
INFO  15:53:09,138 - #38 ;
INFO  15:53:09,138 - #48 int
INFO  15:53:09,140 - #48 x
INFO  15:53:09,140 - #44 [
INFO  15:53:09,140 - #45 ]
INFO  15:53:09,143 - #38 ;
INFO  15:53:09,143 - #42 {
INFO  15:53:09,143 - #43 }
INFO  15:53:09,143 - #43 }
