INFO  15:46:09,615 - Compiling source file: D:\MEGA\PP1 Domaci\project workspace\ProjectRework\test\lex_test_all.mj
INFO  15:46:09,632 - #2 program
INFO  15:46:09,632 - #48 Program
INFO  15:46:09,633 - #4 class
INFO  15:46:09,633 - #48 A
INFO  15:46:09,633 - #42 {
INFO  15:46:09,633 - #50 'a'
INFO  15:46:09,634 - #48 int
INFO  15:46:09,634 - #48 test_method
INFO  15:46:09,634 - #40 (
INFO  15:46:09,634 - #48 int
INFO  15:46:09,634 - #48 a
INFO  15:46:09,635 - #41 )
INFO  15:46:09,635 - #42 {
INFO  15:46:09,635 - #13 for
INFO  15:46:09,635 - #40 (
INFO  15:46:09,635 - #48 int
INFO  15:46:09,636 - #48 i
INFO  15:46:09,636 - #17 =
INFO  15:46:09,636 - #47 0
INFO  15:46:09,637 - #38 ;
INFO  15:46:09,641 - #48 i
INFO  15:46:09,642 - #27 <
INFO  15:46:09,642 - #47 5
INFO  15:46:09,643 - #38 ;
INFO  15:46:09,643 - #48 i
INFO  15:46:09,643 - #36 ++
INFO  15:46:09,643 - #41 )
INFO  15:46:09,643 - #42 {
INFO  15:46:09,643 - #48 x
INFO  15:46:09,644 - #17 =
INFO  15:46:09,644 - #8 new
INFO  15:46:09,644 - #48 int
INFO  15:46:09,644 - #44 [
INFO  15:46:09,644 - #47 5
INFO  15:46:09,645 - #45 ]
INFO  15:46:09,645 - #38 ;
INFO  15:46:09,645 - #48 a
INFO  15:46:09,645 - #46 .
INFO  15:46:09,645 - #48 x
INFO  15:46:09,645 - #37 --
INFO  15:46:09,646 - #17 =
INFO  15:46:09,646 - #47 5
INFO  15:46:09,646 - #38 ;
INFO  15:46:09,646 - #7 if
INFO  15:46:09,646 - #40 (
INFO  15:46:09,647 - #48 i
INFO  15:46:09,647 - #27 <
INFO  15:46:09,647 - #47 5
INFO  15:46:09,647 - #41 )
INFO  15:46:09,647 - #42 {
INFO  15:46:09,648 - #15 continue
INFO  15:46:09,648 - #38 ;
INFO  15:46:09,648 - #43 }
INFO  15:46:09,648 - #5 else
INFO  15:46:09,648 - #3 break
INFO  15:46:09,649 - #38 ;
INFO  15:46:09,649 - #9 print
INFO  15:46:09,649 - #40 (
INFO  15:46:09,650 - #48 Idemo
INFO  15:46:09,650 - #41 )
INFO  15:46:09,650 - #38 ;
INFO  15:46:09,650 - #43 }
INFO  15:46:09,653 - #11 return
INFO  15:46:09,654 - #47 0
INFO  15:46:09,654 - #38 ;
INFO  15:46:09,654 - #43 }
INFO  15:46:09,654 - #43 }
INFO  15:46:09,654 - #48 laza
ERROR 15:46:09,655 - LEKSICKA: (19) [7] Symbol: !
ERROR 15:46:09,655 - LEKSICKA: (19) 	Symbol: !
ERROR 15:46:09,656 - LEKSICKA: (19) 	Symbol: !
INFO  15:46:09,656 - #48 dsfasf
ERROR 15:46:09,656 - LEKSICKA: (19) 	Symbol: ^
INFO  15:46:09,656 - #48 int
INFO  15:46:09,656 - #48 x
INFO  15:46:09,656 - #44 [
INFO  15:46:09,657 - #45 ]
INFO  15:46:09,657 - #39 ,
INFO  15:46:09,657 - #48 y
INFO  15:46:09,657 - #44 [
INFO  15:46:09,657 - #45 ]
INFO  15:46:09,658 - #38 ;
INFO  15:46:09,658 - #20 *
INFO  15:46:09,658 - #21 /
INFO  15:46:09,658 - #22 %
INFO  15:46:09,658 - #23 ==
INFO  15:46:09,658 - #24 !=
INFO  15:46:09,660 - #25 >
INFO  15:46:09,661 - #26 >=
INFO  15:46:09,661 - #27 <
INFO  15:46:09,661 - #28 <=
INFO  15:46:09,661 - #29 &&
INFO  15:46:09,662 - #30 ||
INFO  15:46:09,662 - #17 =
INFO  15:46:09,662 - #31 +=
INFO  15:46:09,662 - #32 -=
INFO  15:46:09,662 - #33 *=
INFO  15:46:09,663 - #34 /=
INFO  15:46:09,663 - #35 %=
INFO  15:46:09,663 - #18 +
INFO  15:46:09,663 - #19 -
INFO  15:46:09,663 - #6 const
INFO  15:46:09,663 - #48 int
INFO  15:46:09,664 - #48 pi
INFO  15:46:09,664 - #17 =
INFO  15:46:09,664 - #47 3
INFO  15:46:09,664 - #39 ,
INFO  15:46:09,665 - #48 e
INFO  15:46:09,665 - #17 =
INFO  15:46:09,665 - #47 2
INFO  15:46:09,665 - #38 ;
ERROR 15:46:09,665 - LEKSICKA: (24) [5] Symbol: ^
ERROR 15:46:09,665 - LEKSICKA: (24) 	Symbol: ^
ERROR 15:46:09,666 - LEKSICKA: (25) [2] Symbol: ^
INFO  15:46:09,666 - #20 *
INFO  15:46:09,666 - #16 static
INFO  15:46:09,666 - #48 nesto
INFO  15:46:09,666 - #17 =
INFO  15:46:09,667 - #47 565
INFO  15:46:09,667 - #38 ;
INFO  15:46:09,667 - #48 int
INFO  15:46:09,667 - #48 ii
INFO  15:46:09,668 - #17 =
INFO  15:46:09,668 - #49 true
INFO  15:46:09,668 - #38 ;
INFO  15:46:09,668 - #48 ii
INFO  15:46:09,669 - #17 =
INFO  15:46:09,669 - #49 false
INFO  15:46:09,669 - #38 ;
INFO  15:46:09,669 - #48 ii
INFO  15:46:09,670 - #39 ,
INFO  15:46:09,670 - #48 i
INFO  15:46:09,671 - #38 ;
INFO  15:46:09,672 - #4 class
INFO  15:46:09,672 - #48 B
INFO  15:46:09,672 - #14 extends
INFO  15:46:09,673 - #48 A
INFO  15:46:09,673 - #42 {
INFO  15:46:09,673 - #12 void
INFO  15:46:09,673 - #48 main
INFO  15:46:09,673 - #40 (
INFO  15:46:09,674 - #41 )
INFO  15:46:09,674 - #48 A
INFO  15:46:09,674 - #48 a
INFO  15:46:09,674 - #38 ;
INFO  15:46:09,675 - #48 C
INFO  15:46:09,675 - #48 c
INFO  15:46:09,675 - #38 ;
INFO  15:46:09,675 - #48 int
INFO  15:46:09,680 - #48 i
INFO  15:46:09,681 - #38 ;
INFO  15:46:09,681 - #48 int
INFO  15:46:09,681 - #48 x
INFO  15:46:09,681 - #44 [
INFO  15:46:09,681 - #45 ]
INFO  15:46:09,681 - #38 ;
INFO  15:46:09,686 - #42 {
INFO  15:46:09,686 - #43 }
INFO  15:46:09,686 - #43 }
