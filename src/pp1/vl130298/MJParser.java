
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 14 00:58:28 CEST 2017
//----------------------------------------------------

package pp1.vl130298;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import java.util.UUID;
import rs.etf.pp1.mj.runtime.Code;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Stack;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 14 00:58:28 CEST 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\262\000\002\076\002\000\002\077\002\000\002\002" +
    "\012\000\002\002\004\000\002\052\003\000\002\003\004" +
    "\000\002\003\002\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\100\002\000\002\013\007\000\002" +
    "\014\005\000\002\014\003\000\002\015\005\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\020\004" +
    "\000\002\020\002\000\002\055\003\000\002\016\005\000" +
    "\002\016\005\000\002\016\004\000\002\017\005\000\002" +
    "\017\005\000\002\017\003\000\002\101\002\000\002\050" +
    "\006\000\002\050\003\000\002\021\004\000\002\021\002" +
    "\000\002\102\002\000\002\025\007\000\002\024\005\000" +
    "\002\024\005\000\002\103\002\000\002\022\010\000\002" +
    "\023\003\000\002\023\002\000\002\056\003\000\002\056" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\005" +
    "\000\002\027\002\000\002\030\005\000\002\030\005\000" +
    "\002\030\003\000\002\104\002\000\002\031\005\000\002" +
    "\105\002\000\002\026\010\000\002\051\004\000\002\007" +
    "\004\000\002\007\003\000\002\007\003\000\002\007\002" +
    "\000\002\106\002\000\002\005\011\000\002\107\002\000" +
    "\002\005\007\000\002\005\010\000\002\005\006\000\002" +
    "\006\005\000\002\010\003\000\002\010\002\000\002\011" +
    "\004\000\002\012\004\000\002\012\003\000\002\054\003" +
    "\000\002\033\004\000\002\033\002\000\002\110\002\000" +
    "\002\034\005\000\002\111\002\000\002\032\010\000\002" +
    "\032\004\000\002\032\004\000\002\112\002\000\002\113" +
    "\002\000\002\032\012\000\002\032\010\000\002\114\002" +
    "\000\002\115\002\000\002\116\002\000\002\032\015\000" +
    "\002\032\006\000\002\117\002\000\002\032\005\000\002" +
    "\120\002\000\002\032\005\000\002\032\004\000\002\032" +
    "\005\000\002\032\007\000\002\121\002\000\002\032\012" +
    "\000\002\032\005\000\002\122\002\000\002\035\005\000" +
    "\002\035\002\000\002\123\002\000\002\070\005\000\002" +
    "\124\002\000\002\125\002\000\002\067\007\000\002\126" +
    "\002\000\002\067\006\000\002\067\005\000\002\067\004" +
    "\000\002\067\004\000\002\067\002\000\002\036\003\000" +
    "\002\036\002\000\002\037\005\000\002\037\003\000\002" +
    "\074\003\000\002\074\002\000\002\127\002\000\002\071" +
    "\006\000\002\071\003\000\002\130\002\000\002\072\006" +
    "\000\002\072\003\000\002\073\005\000\002\073\003\000" +
    "\002\131\002\000\002\060\004\000\002\132\002\000\002" +
    "\064\006\000\002\064\003\000\002\062\003\000\002\133" +
    "\002\000\002\075\006\000\002\075\003\000\002\061\003" +
    "\000\002\134\002\000\002\061\007\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\004\000\002" +
    "\061\007\000\002\061\005\000\002\135\002\000\002\057" +
    "\005\000\002\065\004\000\002\065\002\000\002\066\003" +
    "\000\002\136\002\000\002\066\005\000\002\137\002\000" +
    "\002\140\002\000\002\066\007\000\002\063\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\040\003\000" +
    "\002\040\003\000\002\044\003\000\002\044\003\000\002" +
    "\045\003\000\002\045\003\000\002\041\003\000\002\041" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0115\000\004\004\005\001\002\000\004\002\u0117\001" +
    "\002\000\004\062\001\001\002\000\004\062\010\001\002" +
    "\000\014\003\ufffb\005\ufffb\011\ufffb\054\ufffb\062\ufffb\001" +
    "\002\000\014\003\ufffd\005\ufffd\011\ufffd\054\ufffd\062\ufffd" +
    "\001\002\000\014\003\023\005\024\011\025\054\014\062" +
    "\015\001\002\000\014\003\ufffa\005\ufffa\011\ufffa\054\ufffa" +
    "\062\ufffa\001\002\000\006\003\uffed\062\uffed\001\002\000" +
    "\012\007\000\010\000\055\000\062\000\001\002\000\070" +
    "\003\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\050" +
    "\uffbb\051\uffbb\053\uffbb\054\uffbb\056\uffbb\057\uffbb\060\uffbb" +
    "\062\uffbb\001\002\000\014\003\ufff9\005\ufff9\011\ufff9\054" +
    "\ufff9\062\ufff9\001\002\000\014\003\ufffc\005\ufffc\011\ufffc" +
    "\054\ufffc\062\ufffc\001\002\000\006\006\u0106\054\uffc5\001" +
    "\002\000\006\003\375\062\107\001\002\000\014\003\ufff8" +
    "\005\ufff8\011\ufff8\054\ufff8\062\ufff8\001\002\000\004\054" +
    "\044\001\002\000\004\062\043\001\002\000\004\062\015" +
    "\001\002\000\004\062\ufff7\001\002\000\004\062\031\001" +
    "\002\000\006\050\041\051\040\001\002\000\004\023\033" +
    "\001\002\000\006\050\ufff4\051\ufff4\001\002\000\010\061" +
    "\036\063\037\064\034\001\002\000\006\050\ufff0\051\ufff0" +
    "\001\002\000\006\050\ufff3\051\ufff3\001\002\000\006\050" +
    "\ufff2\051\ufff2\001\002\000\006\050\ufff1\051\ufff1\001\002" +
    "\000\004\062\031\001\002\000\014\003\ufff6\005\ufff6\011" +
    "\ufff6\054\ufff6\062\ufff6\001\002\000\006\050\ufff5\051\ufff5" +
    "\001\002\000\006\006\uffcc\054\uffcc\001\002\000\012\007" +
    "\051\054\045\055\uffc8\062\uffbf\001\002\000\012\007\uffe2" +
    "\010\uffe2\055\uffe2\062\uffe2\001\002\000\004\062\015\001" +
    "\002\000\012\007\051\054\045\055\uffca\062\uffbf\001\002" +
    "\000\004\055\054\001\002\000\004\062\uffc0\001\002\000" +
    "\012\007\uffbc\054\uffbc\055\uffbc\062\uffbc\001\002\000\004" +
    "\055\uffc9\001\002\000\014\003\uffc2\005\uffc2\011\uffc2\054" +
    "\uffc2\062\uffc2\001\002\000\012\007\uffbd\054\uffbd\055\uffbd" +
    "\062\uffbd\001\002\000\004\055\uffcb\001\002\000\012\007" +
    "\uffbe\054\uffbe\055\uffbe\062\uffbe\001\002\000\012\007\061" +
    "\010\uffda\055\062\062\uffda\001\002\000\006\010\uffdb\062" +
    "\uffdb\001\002\000\004\055\uffc1\001\002\000\006\054\uffee" +
    "\062\uffee\001\002\000\012\007\uffe3\010\uffe3\055\uffe3\062" +
    "\uffe3\001\002\000\006\010\122\062\015\001\002\000\010" +
    "\003\070\053\uffd4\062\015\001\002\000\006\060\uffce\062" +
    "\uffd0\001\002\000\006\051\101\053\102\001\002\000\006" +
    "\051\076\053\uffd7\001\002\000\004\053\075\001\002\000" +
    "\004\053\uffd6\001\002\000\006\051\uffd1\053\uffd1\001\002" +
    "\000\006\054\uffdf\062\uffdf\001\002\000\004\062\015\001" +
    "\002\000\004\053\uffd5\001\002\000\006\051\uffd3\053\uffd3" +
    "\001\002\000\004\062\015\001\002\000\006\054\uffde\062" +
    "\uffde\001\002\000\004\062\uffd0\001\002\000\006\051\uffd2" +
    "\053\uffd2\001\002\000\004\062\107\001\002\000\006\051" +
    "\uffcf\053\uffcf\001\002\000\012\050\uffe4\051\uffe4\053\uffe4" +
    "\056\110\001\002\000\004\057\uffe6\001\002\000\004\057" +
    "\112\001\002\000\010\050\uffe5\051\uffe5\053\uffe5\001\002" +
    "\000\004\060\114\001\002\000\004\060\115\001\002\000" +
    "\004\060\116\001\002\000\004\062\117\001\002\000\004" +
    "\053\uffcd\001\002\000\004\062\123\001\002\000\004\062" +
    "\uffd9\001\002\000\004\062\uffd8\001\002\000\004\052\uffe1" +
    "\001\002\000\004\052\125\001\002\000\010\003\uffe0\053" +
    "\uffe0\062\uffe0\001\002\000\006\054\127\062\015\001\002" +
    "\000\032\003\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\017" +
    "\uffdd\020\uffdd\022\uffdd\050\uffdd\054\uffdd\055\uffdd\062\uffdd" +
    "\001\002\000\006\054\uffef\062\uffef\001\002\000\032\003" +
    "\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\017\uffb9\020\uffb9" +
    "\022\uffb9\050\uffb9\054\uffb9\055\uffb9\062\uffb9\001\002\000" +
    "\032\003\146\012\136\013\153\014\142\015\143\017\147" +
    "\020\133\022\151\050\uff92\054\134\055\152\062\135\001" +
    "\002\000\004\052\370\001\002\000\032\003\uffb9\012\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\017\uffb9\020\uffb9\022\uffb9\050" +
    "\uffb9\054\uffb9\055\uffb9\062\uffb9\001\002\000\074\023\uff67" +
    "\024\uff67\025\uff67\026\uff67\027\uff67\030\uff67\031\uff67\032" +
    "\uff67\033\uff67\034\uff67\035\uff67\036\uff67\037\uff67\040\uff67" +
    "\041\uff67\042\uff67\043\uff67\044\uff67\045\uff67\046\uff67\047" +
    "\uff67\050\uff67\051\uff67\052\uff67\053\uff67\056\uff67\057\uff67" +
    "\060\uff67\062\uff67\001\002\000\004\052\uffb8\001\002\000" +
    "\024\023\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a" +
    "\046\353\047\354\052\uff9c\001\002\000\010\003\333\050" +
    "\uff92\062\135\001\002\000\022\003\326\021\uff97\052\uff97" +
    "\053\uff97\061\uff97\062\uff97\063\uff97\064\uff97\001\002\000" +
    "\004\050\uffa7\001\002\000\004\052\265\001\002\000\032" +
    "\003\uffba\012\uffba\013\uffba\014\uffba\015\uffba\017\uffba\020" +
    "\uffba\022\uffba\050\uffba\054\uffba\055\uffba\062\uffba\001\002" +
    "\000\004\050\264\001\002\000\004\050\263\001\002\000" +
    "\004\052\252\001\002\000\074\023\uff71\024\uff71\025\uff71" +
    "\026\uff71\027\uff71\030\uff71\031\uff71\032\uff71\033\uff71\034" +
    "\uff71\035\uff71\036\uff71\037\uff71\040\uff71\041\uff71\042\uff71" +
    "\043\uff71\044\uff71\045\uff71\046\uff71\047\uff71\050\uff71\051" +
    "\uff71\052\uff71\053\uff71\056\uff71\057\uff71\060\uff71\062\uff71" +
    "\001\002\000\020\021\uff83\050\160\052\uff83\061\uff83\062" +
    "\uff83\063\uff83\064\uff83\001\002\000\012\007\uffdc\010\uffdc" +
    "\055\uffdc\062\uffdc\001\002\000\004\050\uffa9\001\002\000" +
    "\004\050\155\001\002\000\034\003\uffa8\012\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\022\uffa8\050" +
    "\uffa8\054\uffa8\055\uffa8\062\uffa8\001\002\000\004\050\235" +
    "\001\002\000\016\021\161\052\172\061\164\062\135\063" +
    "\162\064\170\001\002\000\034\003\uffa5\012\uffa5\013\uffa5" +
    "\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\022\uffa5\050" +
    "\uffa5\054\uffa5\055\uffa5\062\uffa5\001\002\000\004\062\015" +
    "\001\002\000\056\024\uff75\025\uff75\026\uff75\027\uff75\030" +
    "\uff75\031\uff75\032\uff75\033\uff75\034\uff75\035\uff75\036\uff75" +
    "\037\uff75\040\uff75\041\uff75\042\uff75\043\uff75\044\uff75\045" +
    "\uff75\050\uff75\051\uff75\053\uff75\057\uff75\001\002\000\060" +
    "\024\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032" +
    "\uff7a\033\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a" +
    "\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\050\uff7a\051" +
    "\uff7a\052\221\053\uff7a\057\uff7a\001\002\000\056\024\uff77" +
    "\025\uff77\026\uff77\027\uff77\030\uff77\031\uff77\032\uff77\033" +
    "\uff77\034\uff77\035\uff77\036\uff77\037\uff77\040\uff77\041\uff77" +
    "\042\uff77\043\uff77\044\uff77\045\uff77\050\uff77\051\uff77\053" +
    "\uff77\057\uff77\001\002\000\042\024\212\025\213\031\uff82" +
    "\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040" +
    "\uff82\041\210\042\211\050\uff82\051\uff82\053\uff82\057\uff82" +
    "\001\002\000\056\024\uff7e\025\uff7e\026\204\027\201\030" +
    "\177\031\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e" +
    "\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043\205\044\176\045" +
    "\200\050\uff7e\051\uff7e\053\uff7e\057\uff7e\001\002\000\042" +
    "\024\uff7f\025\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f\035" +
    "\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\050\uff7f" +
    "\051\uff7f\053\uff7f\057\uff7f\001\002\000\056\024\uff76\025" +
    "\uff76\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76\033\uff76" +
    "\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76\042" +
    "\uff76\043\uff76\044\uff76\045\uff76\050\uff76\051\uff76\053\uff76" +
    "\057\uff76\001\002\000\056\024\uff7b\025\uff7b\026\uff7b\027" +
    "\uff7b\030\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b" +
    "\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044" +
    "\uff7b\045\uff7b\050\uff7b\051\uff7b\053\uff7b\057\uff7b\001\002" +
    "\000\016\021\uff83\052\uff83\061\uff83\062\uff83\063\uff83\064" +
    "\uff83\001\002\000\004\053\174\001\002\000\056\024\uff72" +
    "\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032\uff72\033" +
    "\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040\uff72\041\uff72" +
    "\042\uff72\043\uff72\044\uff72\045\uff72\050\uff72\051\uff72\053" +
    "\uff72\057\uff72\001\002\000\016\021\uff56\052\uff56\061\uff56" +
    "\062\uff56\063\uff56\064\uff56\001\002\000\016\021\uff51\052" +
    "\uff51\061\uff51\062\uff51\063\uff51\064\uff51\001\002\000\016" +
    "\021\uff53\052\uff53\061\uff53\062\uff53\063\uff53\064\uff53\001" +
    "\002\000\016\021\uff50\052\uff50\061\uff50\062\uff50\063\uff50" +
    "\064\uff50\001\002\000\016\021\uff54\052\uff54\061\uff54\062" +
    "\uff54\063\uff54\064\uff54\001\002\000\016\021\uff7d\052\uff7d" +
    "\061\uff7d\062\uff7d\063\uff7d\064\uff7d\001\002\000\016\021" +
    "\uff57\052\uff57\061\uff57\062\uff57\063\uff57\064\uff57\001\002" +
    "\000\016\021\uff55\052\uff55\061\uff55\062\uff55\063\uff55\064" +
    "\uff55\001\002\000\016\021\uff52\052\uff52\061\uff52\062\uff52" +
    "\063\uff52\064\uff52\001\002\000\016\021\161\052\172\061" +
    "\164\062\135\063\162\064\170\001\002\000\056\024\uff7c" +
    "\025\uff7c\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033" +
    "\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c" +
    "\042\uff7c\043\uff7c\044\uff7c\045\uff7c\050\uff7c\051\uff7c\053" +
    "\uff7c\057\uff7c\001\002\000\016\021\uff59\052\uff59\061\uff59" +
    "\062\uff59\063\uff59\064\uff59\001\002\000\016\021\uff58\052" +
    "\uff58\061\uff58\062\uff58\063\uff58\064\uff58\001\002\000\016" +
    "\021\uff5b\052\uff5b\061\uff5b\062\uff5b\063\uff5b\064\uff5b\001" +
    "\002\000\016\021\uff5a\052\uff5a\061\uff5a\062\uff5a\063\uff5a" +
    "\064\uff5a\001\002\000\016\021\uff5c\052\uff5c\061\uff5c\062" +
    "\uff5c\063\uff5c\064\uff5c\001\002\000\016\021\uff81\052\uff81" +
    "\061\uff81\062\uff81\063\uff81\064\uff81\001\002\000\016\021" +
    "\uff5d\052\uff5d\061\uff5d\062\uff5d\063\uff5d\064\uff5d\001\002" +
    "\000\016\021\161\052\172\061\164\062\135\063\162\064" +
    "\170\001\002\000\042\024\uff80\025\uff80\031\uff80\032\uff80" +
    "\033\uff80\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041" +
    "\uff80\042\uff80\050\uff80\051\uff80\053\uff80\057\uff80\001\002" +
    "\000\020\021\uff79\052\uff79\053\uff79\061\uff79\062\uff79\063" +
    "\uff79\064\uff79\001\002\000\020\021\uff83\052\uff83\053\uff90" +
    "\061\uff83\062\uff83\063\uff83\064\uff83\001\002\000\004\053" +
    "\230\001\002\000\006\051\uff8e\053\uff8e\001\002\000\006" +
    "\051\226\053\uff91\001\002\000\016\021\uff83\052\uff83\061" +
    "\uff83\062\uff83\063\uff83\064\uff83\001\002\000\006\051\uff8f" +
    "\053\uff8f\001\002\000\056\024\uff78\025\uff78\026\uff78\027" +
    "\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034\uff78\035\uff78" +
    "\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044" +
    "\uff78\045\uff78\050\uff78\051\uff78\053\uff78\057\uff78\001\002" +
    "\000\060\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74\031" +
    "\uff74\032\uff74\033\uff74\034\uff74\035\uff74\036\uff74\037\uff74" +
    "\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74\045\uff74\050" +
    "\uff74\051\uff74\053\uff74\056\232\057\uff74\001\002\000\016" +
    "\021\uff83\052\uff83\061\uff83\062\uff83\063\uff83\064\uff83\001" +
    "\002\000\004\057\234\001\002\000\056\024\uff73\025\uff73" +
    "\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73\034" +
    "\uff73\035\uff73\036\uff73\037\uff73\040\uff73\041\uff73\042\uff73" +
    "\043\uff73\044\uff73\045\uff73\050\uff73\051\uff73\053\uff73\057" +
    "\uff73\001\002\000\034\003\uffa4\012\uffa4\013\uffa4\014\uffa4" +
    "\015\uffa4\016\uffa4\017\uffa4\020\uffa4\022\uffa4\050\uffa4\054" +
    "\uffa4\055\uffa4\062\uffa4\001\002\000\074\023\uff6e\024\uff6e" +
    "\025\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033" +
    "\uff6e\034\uff6e\035\uff6e\036\uff6e\037\uff6e\040\uff6e\041\uff6e" +
    "\042\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050" +
    "\uff6e\051\uff6e\052\uff6e\053\uff6e\056\uff6e\057\uff6e\060\uff6e" +
    "\062\uff6e\001\002\000\074\023\uff70\024\uff70\025\uff70\026" +
    "\uff70\027\uff70\030\uff70\031\uff70\032\uff70\033\uff70\034\uff70" +
    "\035\uff70\036\uff70\037\uff70\040\uff70\041\uff70\042\uff70\043" +
    "\uff70\044\uff70\045\uff70\046\uff70\047\uff70\050\uff70\051\uff70" +
    "\052\uff70\053\uff70\056\242\057\uff70\060\243\062\135\001" +
    "\002\000\074\023\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d" +
    "\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036" +
    "\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d" +
    "\045\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053" +
    "\uff6d\056\uff6d\057\uff6d\060\uff6d\062\uff6d\001\002\000\074" +
    "\023\uff6f\024\uff6f\025\uff6f\026\uff6f\027\uff6f\030\uff6f\031" +
    "\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f\037\uff6f" +
    "\040\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f\046" +
    "\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f\056\uff6f" +
    "\057\uff6f\060\uff6f\062\uff6f\001\002\000\016\021\uff6a\052" +
    "\uff6a\061\uff6a\062\uff6a\063\uff6a\064\uff6a\001\002\000\004" +
    "\062\uff6c\001\002\000\004\062\135\001\002\000\074\023" +
    "\uff6b\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b\031\uff6b" +
    "\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b\037\uff6b\040" +
    "\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b" +
    "\047\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b\056\uff6b\057" +
    "\uff6b\060\uff6b\062\uff6b\001\002\000\016\021\uff83\052\uff83" +
    "\061\uff83\062\uff83\063\uff83\064\uff83\001\002\000\004\057" +
    "\uff69\001\002\000\004\057\251\001\002\000\074\023\uff68" +
    "\024\uff68\025\uff68\026\uff68\027\uff68\030\uff68\031\uff68\032" +
    "\uff68\033\uff68\034\uff68\035\uff68\036\uff68\037\uff68\040\uff68" +
    "\041\uff68\042\uff68\043\uff68\044\uff68\045\uff68\046\uff68\047" +
    "\uff68\050\uff68\051\uff68\052\uff68\053\uff68\056\uff68\057\uff68" +
    "\060\uff68\062\uff68\001\002\000\016\021\uff83\052\uff83\061" +
    "\uff83\062\uff83\063\uff83\064\uff83\001\002\000\006\051\uffa2" +
    "\053\255\001\002\000\004\051\257\001\002\000\004\050" +
    "\256\001\002\000\034\003\uffa3\012\uffa3\013\uffa3\014\uffa3" +
    "\015\uffa3\016\uffa3\017\uffa3\020\uffa3\022\uffa3\050\uffa3\054" +
    "\uffa3\055\uffa3\062\uffa3\001\002\000\004\061\260\001\002" +
    "\000\004\053\261\001\002\000\004\050\262\001\002\000" +
    "\034\003\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1" +
    "\017\uffa1\020\uffa1\022\uffa1\050\uffa1\054\uffa1\055\uffa1\062" +
    "\uffa1\001\002\000\034\003\uffb3\012\uffb3\013\uffb3\014\uffb3" +
    "\015\uffb3\016\uffb3\017\uffb3\020\uffb3\022\uffb3\050\uffb3\054" +
    "\uffb3\055\uffb3\062\uffb3\001\002\000\034\003\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\022" +
    "\uffb4\050\uffb4\054\uffb4\055\uffb4\062\uffb4\001\002\000\020" +
    "\003\267\021\uff83\052\uff83\061\uff83\062\uff83\063\uff83\064" +
    "\uff83\001\002\000\010\040\321\050\uff89\053\uff89\001\002" +
    "\000\004\053\316\001\002\000\026\031\313\032\310\033" +
    "\312\034\307\035\314\036\306\037\uff84\040\uff84\050\uff84" +
    "\053\uff84\001\002\000\004\053\uffb2\001\002\000\012\037" +
    "\uff88\040\uff86\050\uff86\053\uff86\001\002\000\004\037\274" +
    "\001\002\000\016\021\uff83\052\uff83\061\uff83\062\uff83\063" +
    "\uff83\064\uff83\001\002\000\010\040\uff87\050\uff87\053\uff87" +
    "\001\002\000\004\053\277\001\002\000\030\003\146\012" +
    "\136\013\153\014\142\015\143\017\147\020\133\022\151" +
    "\050\uff92\054\134\062\135\001\002\000\034\003\uffb1\012" +
    "\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\022\uffb1\050\uffb1\054\uffb1\055\uffb1\062\uffb1\001\002\000" +
    "\034\003\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\302" +
    "\017\uff9d\020\uff9d\022\uff9d\050\uff9d\054\uff9d\055\uff9d\062" +
    "\uff9d\001\002\000\030\003\uff9f\012\uff9f\013\uff9f\014\uff9f" +
    "\015\uff9f\017\uff9f\020\uff9f\022\uff9f\050\uff9f\054\uff9f\062" +
    "\uff9f\001\002\000\034\003\uffb0\012\uffb0\013\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\020\uffb0\022\uffb0\050\uffb0\054" +
    "\uffb0\055\uffb0\062\uffb0\001\002\000\030\003\146\012\136" +
    "\013\153\014\142\015\143\017\147\020\133\022\151\050" +
    "\uff92\054\134\062\135\001\002\000\034\003\uff9e\012\uff9e" +
    "\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\022" +
    "\uff9e\050\uff9e\054\uff9e\055\uff9e\062\uff9e\001\002\000\016" +
    "\021\uff5e\052\uff5e\061\uff5e\062\uff5e\063\uff5e\064\uff5e\001" +
    "\002\000\016\021\uff60\052\uff60\061\uff60\062\uff60\063\uff60" +
    "\064\uff60\001\002\000\016\021\uff62\052\uff62\061\uff62\062" +
    "\uff62\063\uff62\064\uff62\001\002\000\016\021\uff83\052\uff83" +
    "\061\uff83\062\uff83\063\uff83\064\uff83\001\002\000\016\021" +
    "\uff61\052\uff61\061\uff61\062\uff61\063\uff61\064\uff61\001\002" +
    "\000\016\021\uff63\052\uff63\061\uff63\062\uff63\063\uff63\064" +
    "\uff63\001\002\000\016\021\uff5f\052\uff5f\061\uff5f\062\uff5f" +
    "\063\uff5f\064\uff5f\001\002\000\012\037\uff85\040\uff85\050" +
    "\uff85\053\uff85\001\002\000\030\003\146\012\136\013\153" +
    "\014\142\015\143\017\147\020\133\022\151\050\uff92\054" +
    "\134\062\135\001\002\000\034\003\uff9d\012\uff9d\013\uff9d" +
    "\014\uff9d\015\uff9d\016\302\017\uff9d\020\uff9d\022\uff9d\050" +
    "\uff9d\054\uff9d\055\uff9d\062\uff9d\001\002\000\034\003\uffaf" +
    "\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020" +
    "\uffaf\022\uffaf\050\uffaf\054\uffaf\055\uffaf\062\uffaf\001\002" +
    "\000\016\021\uff8b\052\uff8b\061\uff8b\062\uff8b\063\uff8b\064" +
    "\uff8b\001\002\000\016\021\uff83\052\uff83\061\uff83\062\uff83" +
    "\063\uff83\064\uff83\001\002\000\006\050\uff8a\053\uff8a\001" +
    "\002\000\004\050\325\001\002\000\034\003\uffa6\012\uffa6" +
    "\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\022" +
    "\uffa6\050\uffa6\054\uffa6\055\uffa6\062\uffa6\001\002\000\004" +
    "\053\332\001\002\000\020\021\uff83\052\uff83\053\uff90\061" +
    "\uff83\062\uff83\063\uff83\064\uff83\001\002\000\004\053\331" +
    "\001\002\000\006\050\uff96\053\uff96\001\002\000\006\050" +
    "\uff95\053\uff95\001\002\000\004\053\347\001\002\000\004" +
    "\050\335\001\002\000\020\021\uffae\050\uffae\052\uffae\061" +
    "\uffae\062\uffae\063\uffae\064\uffae\001\002\000\020\021\uff83" +
    "\050\uff8c\052\uff83\061\uff83\062\uff83\063\uff83\064\uff83\001" +
    "\002\000\004\050\341\001\002\000\004\050\uff8d\001\002" +
    "\000\006\053\uffad\062\uffad\001\002\000\006\053\uff92\062" +
    "\135\001\002\000\004\053\uffac\001\002\000\004\053\345" +
    "\001\002\000\030\003\146\012\136\013\153\014\142\015" +
    "\143\017\147\020\133\022\151\050\uff92\054\134\062\135" +
    "\001\002\000\034\003\uffab\012\uffab\013\uffab\014\uffab\015" +
    "\uffab\016\uffab\017\uffab\020\uffab\022\uffab\050\uffab\054\uffab" +
    "\055\uffab\062\uffab\001\002\000\030\003\146\012\136\013" +
    "\153\014\142\015\143\017\147\020\133\022\151\050\uff92" +
    "\054\134\062\135\001\002\000\034\003\uffaa\012\uffaa\013" +
    "\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\022\uffaa" +
    "\050\uffaa\054\uffaa\055\uffaa\062\uffaa\001\002\000\016\023" +
    "\361\041\210\042\211\043\205\044\176\045\200\001\002" +
    "\000\004\052\355\001\002\000\006\050\uff94\053\uff94\001" +
    "\002\000\006\050\uff93\053\uff93\001\002\000\022\003\uff9b" +
    "\021\uff9b\052\uff9b\053\uff9b\061\uff9b\062\uff9b\063\uff9b\064" +
    "\uff9b\001\002\000\016\021\uff64\052\uff64\061\uff64\062\uff64" +
    "\063\uff64\064\uff64\001\002\000\016\021\uff65\052\uff65\061" +
    "\uff65\062\uff65\063\uff65\064\uff65\001\002\000\016\021\uff99" +
    "\052\uff99\061\uff99\062\uff99\063\uff99\064\uff99\001\002\000" +
    "\016\021\uff66\052\uff66\061\uff66\062\uff66\063\uff66\064\uff66" +
    "\001\002\000\016\021\uff83\052\uff83\061\uff83\062\uff83\063" +
    "\uff83\064\uff83\001\002\000\006\050\uff98\053\uff98\001\002" +
    "\000\004\052\365\001\002\000\010\003\uffb7\050\uffb7\062" +
    "\uffb7\001\002\000\032\003\146\012\136\013\153\014\142" +
    "\015\143\017\147\020\133\022\151\050\uff92\054\134\055" +
    "\367\062\135\001\002\000\034\003\uffa0\012\uffa0\013\uffa0" +
    "\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\022\uffa0\050" +
    "\uffa0\054\uffa0\055\uffa0\062\uffa0\001\002\000\004\062\135" +
    "\001\002\000\004\053\uffb6\001\002\000\004\053\373\001" +
    "\002\000\004\050\374\001\002\000\034\003\uffb5\012\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\022" +
    "\uffb5\050\uffb5\054\uffb5\055\uffb5\062\uffb5\001\002\000\024" +
    "\003\uffea\005\uffea\007\uffea\011\uffea\050\u0104\051\u0103\054" +
    "\uffea\055\uffea\062\uffea\001\002\000\006\050\u0101\051\u0100" +
    "\001\002\000\006\050\uffe7\051\uffe7\001\002\000\004\062" +
    "\107\001\002\000\020\003\uffec\005\uffec\007\uffec\011\uffec" +
    "\054\uffec\055\uffec\062\uffec\001\002\000\006\050\uffe9\051" +
    "\uffe9\001\002\000\004\062\107\001\002\000\020\003\uffeb" +
    "\005\uffeb\007\uffeb\011\uffeb\054\uffeb\055\uffeb\062\uffeb\001" +
    "\002\000\006\050\uffe8\051\uffe8\001\002\000\006\003\u010c" +
    "\062\015\001\002\000\004\054\u0108\001\002\000\012\007" +
    "\051\054\045\055\uffc8\062\uffbf\001\002\000\004\055\u010a" +
    "\001\002\000\014\003\uffc4\005\uffc4\011\uffc4\054\uffc4\062" +
    "\uffc4\001\002\000\004\054\uffc7\001\002\000\004\054\u010d" +
    "\001\002\000\012\007\051\054\045\055\uffc8\062\uffbf\001" +
    "\002\000\004\055\u010f\001\002\000\014\003\uffc3\005\uffc3" +
    "\011\uffc3\054\uffc3\062\uffc3\001\002\000\004\054\u0111\001" +
    "\002\000\012\007\051\054\045\055\uffc8\062\uffbf\001\002" +
    "\000\004\055\u0113\001\002\000\014\003\uffc6\005\uffc6\011" +
    "\uffc6\054\uffc6\062\uffc6\001\002\000\012\007\uffe2\010\uffe2" +
    "\055\uffe2\062\uffe2\001\002\000\012\007\061\010\uffda\055" +
    "\u0116\062\uffda\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0115\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\076\005\001\001\000\004\052\006\001\001\000\004" +
    "\003\010\001\001\000\002\001\001\000\020\004\016\005" +
    "\021\013\011\016\015\051\017\054\012\055\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\077\u0113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\107\u0106\001\001\000\006\017\375\050\376\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\025\001\001\000\004\100\026\001\001\000" +
    "\006\014\027\015\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\052\007\047" +
    "\010\045\011\051\012\046\001\001\000\004\021\057\001" +
    "\001\000\010\016\056\054\012\055\020\001\001\000\010" +
    "\006\055\010\045\011\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\022\063\023\064\024\062\025\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\125\001" +
    "\001\000\002\001\001\000\006\054\120\056\117\001\001" +
    "\000\014\026\072\027\071\030\070\031\073\054\066\001" +
    "\001\000\006\104\104\105\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\076\031\077" +
    "\054\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\103\054\102\001\001\000\002\001\001\000\004" +
    "\104\104\001\001\000\002\001\001\000\004\050\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\102\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\127\054\012\055\020\001" +
    "\001\000\004\103\130\001\001\000\002\001\001\000\004" +
    "\033\131\001\001\000\016\032\143\034\137\057\136\063" +
    "\147\067\144\070\140\001\001\000\002\001\001\000\004" +
    "\033\365\001\001\000\002\001\001\000\004\110\363\001" +
    "\001\000\006\123\351\124\350\001\001\000\012\057\136" +
    "\063\147\067\333\070\140\001\001\000\004\126\326\001" +
    "\001\000\004\120\323\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\135\235\001\001\000\006\060\155\131\156" +
    "\001\001\000\002\001\001\000\004\117\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\057\162\061\170\062\166\063\147\064\164\075\165\001" +
    "\001\000\002\001\001\000\004\054\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\040" +
    "\214\044\215\045\213\001\001\000\010\041\201\046\202" +
    "\047\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\060\172\131\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\133\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\057\162\061\206\063\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\132\216\001\001\000\002\001\001\000\014\057" +
    "\162\061\170\062\217\063\147\075\165\001\001\000\002" +
    "\001\001\000\004\134\221\001\001\000\012\036\222\037" +
    "\224\060\223\131\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\060\226\131\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\060\232\131\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\236\001\001" +
    "\000\006\063\237\066\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\137\245\001\001\000\004\136\243" +
    "\001\001\000\004\063\244\001\001\000\002\001\001\000" +
    "\006\060\246\131\156\001\001\000\004\140\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\060\252\131" +
    "\156\001\001\000\004\121\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\060\267\071\270\072" +
    "\265\073\271\131\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\310\001\001\000\004\112\275\001" +
    "\001\000\004\130\272\001\001\000\002\001\001\000\012" +
    "\060\267\072\274\073\271\131\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\032\277\034\137\057\136" +
    "\063\147\067\144\070\140\001\001\000\004\113\300\001" +
    "\001\000\004\035\302\001\001\000\004\122\303\001\001" +
    "\000\002\001\001\000\016\032\304\034\137\057\136\063" +
    "\147\067\144\070\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\060" +
    "\314\131\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\032\316\034" +
    "\137\057\136\063\147\067\144\070\140\001\001\000\004" +
    "\035\317\001\001\000\002\001\001\000\004\127\321\001" +
    "\001\000\014\060\267\071\322\072\265\073\271\131\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\036\327\037\224\060\223" +
    "\131\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\114\335\001\001\000\016\060\267\071\337\072\265\073" +
    "\271\074\336\131\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\115\341\001\001\000\012\057\136\063" +
    "\147\067\342\070\140\001\001\000\004\116\343\001\001" +
    "\000\002\001\001\000\016\032\345\034\137\057\136\063" +
    "\147\067\144\070\140\001\001\000\002\001\001\000\016" +
    "\032\347\034\137\057\136\063\147\067\144\070\140\001" +
    "\001\000\002\001\001\000\010\042\357\045\356\047\355" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\125\361\001\001\000\002\001\001\000\006\060" +
    "\362\131\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\032\143\034\137\057\136\063" +
    "\147\067\144\070\140\001\001\000\002\001\001\000\006" +
    "\057\370\063\147\001\001\000\004\111\371\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\u0101\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\u0104\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\u010a\001\001\000\002\001\001\000\014\006\052" +
    "\007\u0108\010\045\011\051\012\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\106\u010f\001\001\000\002" +
    "\001\001\000\014\006\052\007\u010d\010\045\011\051\012" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\052\007\u0111\010\045\011\051\012" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\u0114\001\001\000\012\022\063\023\064\024\062\025" +
    "\065\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 3;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

		     Singleton s = Singleton.getInstance();
		     s.initSymbolTable();
		  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

			  Singleton s = Singleton.getInstance();
		      Symbol symbol = this.getScanner().next_token();
			      if (symbol != null && symbol.value != null) 
				      s.log.info(symbol.toString() + " " + symbol.value.toString());
			  return symbol;
		  
    }



				// Predefinisane metode za ispis poruke 
				
				public void report_fatal_error(String message, Object info) throws java.lang.Exception {
     			    done_parsing();
      			    report_error(message, info);
    			}
  
			    public void syntax_error(Symbol cur_token) {
			        report_error("Sintaksna greska na liniji " + cur_token.left  , cur_token);
			    }
			  
			    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
			        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
			    }
			    
			    
			     public void report_error(String message, Object info) {
			    	errorDectected = true;
			    	s.log.error(message);
			    }
			    
			    public void report_info(String message, Object info) {
			        s.log.info("WTF info (search in cup)");	
			    }
    
				Singleton s = Singleton.getInstance();
			   

				Struct lastConstType = Tab.noType;
				Struct lastVarType = Tab.noType;
				
				Stack<Obj> lastDesignator = new Stack<Obj>();
				Obj assignopDesignator;

				int globalVariables     = 0; // definicija globalnih promenljivih  -> ako se nalazi u globalnom opsegu definicije promenljivih
				int localMainVariables  = 0; // definicija lokalnih promeljivih (u main funkciji)
				int globalConstants     = 0; // definicije globalnih konstanti
				

				int methods             = 0; // definicija globalniih i statickih funkicja unutrasnjih klasa
				int calledFuncMain      = 0; // poziv funkicje u telu metode main
				int fomalArgMeth        = 0; // delaracija formalnih argumenata funkcije 
		
				int defInnerClass 		= 0; // definicjije unutrasnjih klasa
				int defInnerClassMeth   = 0; // defiicije metoda unutrasnjih klasa
				int dekFieldsInnerClass = 0; // deklaracija polja unutrasnjih klasa
	
				boolean isArray      = false,      // Flag: da li se radi o nizu
						isGlobal     = false,      // Flag: true - ako smo u globalnom opsegu programa
						isClass      = false,      // Flag: true - ako smo unutar klase
						isMain       = false,      // Flag: true - ako smo nekad naisli na main metodu (void main())
						isStatic     = false,      // Flag: true - ako je trenutna metoda static (samo za klase)
						isStaticFld  = false,      // Flag: true - ako je trenutno polje static  (samo za klase)
						isMethod      = false,	   // Flag: true - ako smo unutar metode
						isDot		 = false,      // Flag: true - pojavila se tacka (unused)
						isArrayElem  = false;      // Flag: true - ako obradjuemo element niza
			
			
				boolean isAssign     = false;      // da li se radi dodela vrednosti
				boolean actParsList  = false;
				int forLoopLevel      = 0;              // Nivo ugnezdenosti for petlje (0 - ako se ne nalazimo u for petlji)
	
				
	
				boolean errorDectected = false;   // Flag: true - u slucaju bilo kakve greske
				
				Struct returnType = null;
				
				
			 
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {

 
				Singleton s = Singleton.getInstance();
				
				// Method variables
				
				Obj currentMethod        = null;    // ima informaciju o funkciji koja se trenutno obradjuje
				int currMethodFormParams = 0;       // broj formalnih parametra funckije
				
				List<Obj> FormalParamStack = new ArrayList<Obj>();
						
						
				List<Obj> MehtodWithVarArgs = new ArrayList<>();
				Stack<Obj> currentMethodStack = new Stack<Obj>();
				
				Stack<List<Obj>> varArgsStack  = new Stack<List<Obj>>();
				
				
				boolean haveVarArgs = false;
				Struct varArgsType = Tab.noType;
				
				boolean haveMain = false;    // da li imamo main fju u programu
				boolean returnFound = false; // koristi se kada fja treba da vrati vredonost !
				
				
  				// Class varialbes
				Obj currentClass    = null;    // ima informaciju o klasi koja se trenutno obradjuje
				HashMap<Struct, List<Obj>> staticFldMap = new HashMap<>();
				Struct parentClass = null;
			
				
				boolean isActPar = false;
				
				Obj prevCondFact = null;
				Obj prevCondTerm = null;
				boolean methodErrorDetected = false; // da li se desila greska kod parsiranja metoode
				
				
				
				/* CONDITION */
				LinkedList<Integer> condFactJumps 			= new LinkedList<Integer>();
				LinkedList<Integer> condTermJumps 			= new LinkedList<Integer>();
				LinkedList<LinkedList<Integer>> elseAdr 	= new LinkedList<LinkedList<Integer>>();
				LinkedList<Integer> afterElseAdr 			= new LinkedList<Integer>();
				LinkedList<LinkedList<Integer>> breakJump	= new LinkedList<LinkedList<Integer>>();
				LinkedList<Integer> currBreakJump 		    = new LinkedList<Integer>();
				LinkedList<Integer> continueJump 			= new LinkedList<Integer>();
				
				int forConditionStartAdr;
				int currentRelop;
				int forStepAdr;
	
				
				
				/* associativity*/
				Stack<Stack<Integer>>    opStack = new Stack<Stack<Integer>>();
				Stack<Obj> objStack = new Stack<Obj>();
				
				LinkedList<Obj> arrayStack = new LinkedList<Obj>();
				boolean isLonlyFactor = false;
				boolean isLonlyTerm = false;
				
				int isExpr = 0;
				
				boolean onStack = false;
							
				
				
	 
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // MulopRight ::= MOEQ 
            {
              Integer RESULT =null;
		 RESULT = Code.rem+100; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // MulopRight ::= DEQ 
            {
              Integer RESULT =null;
		 RESULT = Code.div+100;	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // MulopRight ::= MUEQ 
            {
              Integer RESULT =null;
		 RESULT = Code.mul+100; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // MulopLeft ::= MOD 
            {
              Integer RESULT =null;
		 RESULT = Code.rem;     
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // MulopLeft ::= DIV 
            {
              Integer RESULT =null;
		 RESULT = Code.div; 	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // MulopLeft ::= MUL 
            {
              Integer RESULT =null;
		 RESULT = Code.mul;		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Mulop ::= MulopRight 
            {
              Integer RESULT =null;
		int mrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mr = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = mr; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Mulop ::= MulopLeft 
            {
              Integer RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer ml = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = ml;	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // AddopRight ::= MEQ 
            {
              Integer RESULT =null;
		 RESULT = Code.sub+100; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // AddopRight ::= PEQ 
            {
              Integer RESULT =null;
		 RESULT = Code.add+100;	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // AddopLeft ::= MINUS 
            {
              Integer RESULT =null;
		 RESULT = Code.sub;   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // AddopLeft ::= PLUS 
            {
              Integer RESULT =null;
		 RESULT = Code.add;		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Addop ::= AddopRight 
            {
              Integer RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer ar = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = ar; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Addop ::= AddopLeft 
            {
              Integer RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer al = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = al;	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Relop ::= GEQ 
            {
              Integer RESULT =null;
		 RESULT = Code.ge; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Relop ::= GTR 
            {
              Integer RESULT =null;
		 RESULT = Code.gt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Relop ::= LEQ 
            {
              Integer RESULT =null;
		 RESULT = Code.le; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Relop ::= LSS 
            {
              Integer RESULT =null;
		 RESULT = Code.lt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Relop ::= NEQ 
            {
              Integer RESULT =null;
		 RESULT = Code.ne; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Relop ::= EQU 
            {
              Integer RESULT =null;
		 RESULT = Code.eq; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Assignop ::= MulopRight 
            {
              Integer RESULT =null;
		int mrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mr = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = mr; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Assignop ::= AddopRight 
            {
              Integer RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer ar = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = ar; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Assignop ::= EQUAL 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = new Integer(101); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // DesignatorIdent ::= IDENT 
            {
              Obj RESULT =null;
		int symbolNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int symbolNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String symbolName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					 	RESULT = s.designatorName(symbolName, symbolNameleft);
					 	s.staticAccess(RESULT, symbolNameleft);
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorIdent",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // DesignatorElem ::= QLBRACE NT$33 Expr NT$34 QRBRACE 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.isArrayElem = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorElem",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$34 ::= 
            {
              Obj RESULT =(Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
						if(!s.exprArray( expr, exprleft))
							RESULT = Tab.noObj;
						parser.lastDesignator.pop();

					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$34",94, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$33 ::= 
            {
              Obj RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

						if(s.designatorArray(parser.lastDesignator.peek(), qleft)){
							 parser.isArrayElem = true;
							 RESULT = s.arrayAcces(parser.lastDesignator.peek());
						}
						else
							RESULT = Tab.noObj;
							
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$33",93, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DesignatorElem ::= DOT NT$32 DesignatorIdent 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int designatorIdenleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorIdenright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designatorIden = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						
						RESULT = s.designatorDot(parser.lastDesignator.peek(), designatorIden, designatorIdenleft);
						s.resetScope();
						parser.lastDesignator.pop();
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorElem",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$32 ::= 
            {
              Obj RESULT =null;
 s.changeToGlobalScope(parser.lastDesignator.peek()); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$32",92, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DesignatorElem ::= DesignatorIdent 
            {
              Obj RESULT =null;
		int designatorIdenleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorIdenright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designatorIden = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						RESULT = designatorIden;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorElem",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DesignatorList ::= 
            {
              Obj RESULT =null;
		 RESULT = Tab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorList",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DesignatorList ::= DesignatorList DesignatorElem 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = designator;  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorList",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Designator ::= DesignatorIdent NT$31 DesignatorList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int designatorListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designatorList = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						if(designatorList.equals(Tab.noObj)) RESULT = designator;
						else RESULT = designatorList; 
						
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$31 ::= 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
					   parser.lastDesignator.push(designator);						
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$31",91, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Factor ::= LPAREN Expr RPAREN 
            {
              Obj RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
						RESULT = expr; 
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Factor ::= NEW Type QLBRACE Expr QRBRACE 
            {
              Obj RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					    RESULT = s.factorArray(expr, exprleft);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Factor ::= NEW Type 
            {
              Obj RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						RESULT = s.factorNew(type,typeleft);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Factor ::= BOOL 
            {
              Obj RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				    	Obj c = new Obj(Obj.Con, "Constant factor bool" , s.boolType);
						c.setAdr((i.equals("true"))? 1 : 0);
						Code.load(c);
						RESULT = c;
				    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Factor ::= ASCII 
            {
              Obj RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						Obj c = new Obj(Obj.Con, "Constant factor char", Tab.charType);
						c.setAdr(i.charAt(1));
						Code.load(c);
						RESULT = c;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Factor ::= NUMBER 
            {
              Obj RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						Obj c = new Obj(Obj.Con, "Constant factor nubmer", Tab.intType);
						c.setAdr(i.intValue());
						Code.load(c);
						RESULT = c;
						
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Factor ::= Designator LPAREN NT$30 ActPars RPAREN 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
						RESULT = s.afterActParsMethod(func, true, funcleft);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$30 ::= 
            {
              Obj RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

						RESULT = s.checkMethodCallDesignator(func, true,  funcleft);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$30",90, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Factor ::= Designator 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						RESULT = designator;
						if(!s.isArrayElem(designator)){
							Code.load(designator);
							onStack = true;
						} else
							onStack = false;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // MulopFactorList ::= Factor 
            {
              Obj RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj factor = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						s.semanticInfo("FACTOR LONLY: " + factor.getName() + " " + factor.toString() + " "+factor.getAdr()) ;
						isLonlyFactor = true;
						RESULT = factor;
						
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopFactorList",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // MulopFactorList ::= MulopFactorList Mulop NT$29 Factor 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mflleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int mflright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj mfl = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj factor = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						
						s.addToStack(null, mfl);
							
						// not gen code
						s.factor(factor, mfl, op, mflleft);
						
						if(op.intValue() < 101){
							if(s.isArrayElem(factor) && onStack == false){
								Code.load(factor);	
								onStack = true;
							}
							
							s.calculateOp(op ,null,null);
						}
						isLonlyFactor = false;
						RESULT = mfl;
						
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopFactorList",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$29 ::= 
            {
              Obj RESULT =null;
		int mflleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int mflright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj mfl = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

				
						s.addToStack(op, mfl);
						if(op.intValue() < 101){
							if(s.isArrayElem(mfl) && onStack == false){
								Code.load(mfl);	
								onStack = true;
							}
						}	
							
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$29",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Term ::= MulopFactorList 
            {
              Obj RESULT =null;
		int mflleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mflright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj mfl = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						
						// s.termEnd(mfl);
						 RESULT = mfl;
						
								
						/*if (isLonlyFactor)
							  RESULT = mfl;    // za slucaj usamljenog Faktora
						else
							RESULT = new Obj(Obj.Var, "complex term", Tab.intType);
						*/
				
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // AddopTermList ::= Term 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					
						s.semanticInfo("TERM LONLY: " + term.getName() + " "   +  term.getAdr()) ;
						isLonlyTerm = true;
						RESULT = term; 
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermList",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // AddopTermList ::= AddopTermList Addop NT$28 Term 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int atlleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int atlright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj atl = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					
						s.addToStack(null, term);
						// not gen code
						s.expr(atl, term, op, atlleft);
						
						if(op.intValue() < 101)	{	
							if(s.isArrayElem(term) && onStack == false){
								Code.load(term);	
								onStack = true;
							}	
						
							s.calculateOp(op ,null,null);
						}
						RESULT = term;
						isLonlyTerm = false;
						
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermList",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$28 ::= 
            {
              Obj RESULT =null;
		int atlleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int atlright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj atl = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					
						s.addToStack(op, atl);
						if(op.intValue() < 101){
							if(s.isArrayElem(atl) && onStack == false){
								Code.load(atl);	
								onStack = true;
							}
						}	
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$28",88, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Expr ::= NT$27 AddopTermList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int addopTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addopTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj addopTerm = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
							
						isExpr--;
						if (isLonlyTerm){
							s.semanticInfo("LONLY EXPR: " + addopTerm.getName());
							
							RESULT =  addopTerm;// za slucaj usamljenog Faktora
							if(s.isArrayElem(addopTerm) && onStack == false){
								Code.load(addopTerm);
								s.semanticInfo("ARRAY LOAD IN EXPRESSION " + addopTerm.getName());
								onStack = true;
							}
						}else{
							s.semanticInfo("LEva strana expr = " + addopTerm.getName());
							RESULT = new Obj(Obj.Con, "complex expr", Tab.intType);
							
						}
						
						s.calculateExpr();
						
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$27 ::= 
            {
              Obj RESULT =null;
 
						isExpr++;
						opStack.push(new Stack<>());
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$27",87, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CondFact ::= Expr 
            {
              Obj RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						RESULT = s.conditionFact(expr, null, -1, exprleft);
					   	
					   	// TODO pogledaj da li ovde treba da se gleda boolean (true false a ne int);
					    Obj o = new Obj(Obj.Con, "expr", Tab.intType);
						o.setAdr(0);
					    Code.load(o);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CondFact ::= Expr Relop Expr 
            {
              Obj RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj expr1 = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int relopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int relopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer relop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj expr2 = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						RESULT = s.conditionFact(expr1, expr2, relop, expr1left);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CondTerm ::= CondFact 
            {
              Obj RESULT =null;
		int condFactleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int condFactright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj condFact = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = condFact;  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CondTerm ::= CondFact NT$26 AND CondTerm 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int condFactleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int condFactright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj condFact = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		  RESULT = new Obj(Obj.Var, UUID.randomUUID().toString(), s.boolType); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$26 ::= 
            {
              Obj RESULT =null;
		int condFactleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int condFactright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj condFact = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

						s.condFact();
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$26",86, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Condition ::= CondTerm 
            {
              Obj RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj ct = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						RESULT = s.condTerm(ct, true);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Condition ::= CondTerm OR NT$25 Condition 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int ctleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj ct = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$25 ::= 
            {
              Obj RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj ct = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

						RESULT = s.condTerm(ct, false);	
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$25",85, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ConditionEps ::= 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionEps",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ConditionEps ::= Condition 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionEps",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ActParsList ::= Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						if(!parser.isMain && s.isMethodWithVarArgs(currentMethodStack.peek()))
							s.checkParam(expr,exprleft); 
						else
						if(!parser.isMethod || parser.isMain)
							s.checkParam(expr,exprleft); 	
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ActParsList ::= ActParsList COMMA Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						if(!parser.isMain && s.isMethodWithVarArgs(currentMethodStack.peek()))
							s.checkParam(expr,exprleft); 
						
						else if(!parser.isMethod || parser.isMain){
							s.checkParam(expr,exprleft); 
						}
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ActPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ActPars ::= ActParsList 
            {
              Object RESULT =null;
		 isActPar = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DesignatorStatement ::= 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DesignatorStatement ::= Designator DEC 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					   		RESULT = s.designatorDec(designator,designatorleft);
					   		s.calculateOp(Code.inc, RESULT, true);
					   	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DesignatorStatement ::= Designator INC 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					    	RESULT = s.designatorInc(designator,designatorleft);
					    	s.calculateOp(Code.inc, RESULT, false);
					    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DesignatorStatement ::= DesignatorLParen error RPAREN 
            {
              Obj RESULT =null;
			
					 		s.sintaxInfo("GRESKA (]): Lista parametra funkcije . ");	 
					 	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DesignatorStatement ::= DesignatorLParen NT$24 ActPars RPAREN 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
					 		RESULT = s.afterActParsMethod(designator,false, designatorleft);
					 	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$24 ::= 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
							RESULT = s.checkMethodCallDesignator(designator, false, designatorleft);
					 	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$24",84, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DesignatorStatement ::= Designator NT$22 Assignop NT$23 Expr 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							RESULT = s.designatorAssignop(designator, expr, designatorleft);
							
							if(op.intValue() > 101)
								s.calculateOp(op.intValue(), null, null);
								
							Code.store(designator);
							
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$23 ::= 
            {
              Obj RESULT =(Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
							
							s.semanticInfo("DESIGNATOR STATEMENT : "  + designator.getName());
							// Na stek nam treba ako se radi o kombinovanom operatoru :(
							
							if (op.intValue() > 101) {
								if (s.isArrayElem(designator))
									Code.put(Code.dup2);
									
								Code.load(designator);
								System.out.println("LOAD2 "+ designator.getName());
			
							}
							
							System.out.println("DESIGNATOR STATEMEN OP: -> " + op.intValue());

						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$23",83, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$22 ::= 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parser.assignopDesignator = designator; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$22",82, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DesignatorLParen ::= Designator NT$21 LPAREN 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorLParen",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$21 ::= 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
  RESULT = designator; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$21",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ElseStatement ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseStatement",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ElseStatement ::= ELSE NT$20 Statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseStatement",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$20 ::= 
            {
              Object RESULT =null;
 
						s.ifElse();
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$20",80, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Statement ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Statement ::= PRINT LPAREN Expr NT$19 COMMA NUMBER RPAREN SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					 	 
					 	 s.print(expr, num);
					 	 if(parser.isMain == true)
					 		parser.calledFuncMain++;
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$19 ::= 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					 RESULT = s.statementPrint(expr, exprleft);
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$19",79, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Statement ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
					 
					     RESULT = s.statementPrint(expr, exprleft);
					     s.print(expr, -1);

					 	
					 	if(parser.isMain == true)
					 		parser.calledFuncMain++; 
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Statement ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int exprObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj exprObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					 	/**
					 	* (18) Tip neterminala <i> exprObj </i> mora biti ekvialentan <u>povratnom tipu</u> tekuce metode/glavne funkcije.
					 	*/
					      if(currentMethod == null)
					    	s.semanticError(exprObjleft, "Return ne sme postojati izvan tela metode (return[expr])");
					 	returnFound = true; /* add return type */ 
					 	parser.returnType = exprObj.getType();
					 	if(!parser.returnType.equals(currentMethod.getType()))
			            	s.semanticError(exprObjleft, "Funckija ocekuje povratnu vrednost " + s.getTypeName(currentMethod.getType().getKind()) + " , a vracena vrednost je tipa " + s.getTypeName(parser.returnType.getKind()));
						
						
						//Code.load(exprObj);
						 s.methodExit();
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Statement ::= RETURN SEMI 
            {
              Object RESULT =null;
		int retSemileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int retSemiright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object retSemi = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					 
					       if(currentMethod == null)
					           s.semanticError(retSemileft, "Return ne sme postojati izvan tela metode");
					       if(!currentMethod.getType().equals(Tab.noType))
					           s.semanticError(retSemileft, "Funkcija: " + currentMethod.getName() + " ocekuje return [expr] , ne moze samo return!");
						 returnFound = true; 
						 parser.returnType = Tab.noType; 
						 s.methodExit();
						 
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Statement ::= CONTINIUE NT$18 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$18 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
					 	if(parser.forLoopLevel <= 0) s.sintaxError(cleft , "Continue ne moze biti van for petlje" ); 
					 	else {
					 		if (continueJump == null || continueJump.isEmpty()) {
								if (continueJump == null || continueJump.isEmpty()) {
									s.semanticError(cleft, "Continuiue ne moze da skoci, ne zna gde");
									return null;
								}
							}
							Code.putJump(continueJump.peek());
					 		}
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$18",78, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Statement ::= BREAK NT$17 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$17 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
						 if(parser.forLoopLevel <= 0) s.sintaxError(bleft , "Break ne moze biti van for petlje" );
						 else{
				  		 	Code.putJump(0);
				  			if(breakJump == null || breakJump.isEmpty()){
				  				s.semanticError(bleft, "Break ne moze da skoci, ne zna gde");
				  				return null;
				  			}
							breakJump.peekFirst().add(new Integer(Code.pc - 2));
						} 
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$17",77, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Statement ::= ForStatement error RPAREN Statement 
            {
              Object RESULT =null;
		
					 	parser.forLoopLevel--;
					 	s.semanticDebug("Smanjena dubina fora " + parser.forLoopLevel);
			    	 	s.sintaxInfo("GRESKA () ;): Dekleracija designator statement, najverovatnije u for . ");	
			    	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Statement ::= ForStatement DesignatorStatement SEMI NT$14 ConditionEps SEMI NT$15 DesignatorStatement NT$16 RPAREN Statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					 
					 	parser.forLoopLevel--;
						s.semanticDebug(stmtleft,"Smanjena dubina for petlje, dubina = " + parser.forLoopLevel); 
					 	s.forBodyEnd();
					 	
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

						 s.forAfterStep();
			  			
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$16",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
 
					 	s.forAfterCondition();
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$15",75, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$14 ::= 
            {
              Object RESULT =null;
 forConditionStartAdr = Code.pc; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$14",74, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Statement ::= IF LPAREN error RPAREN Statement ElseStatement 
            {
              Object RESULT =null;
		
			    	 	s.sintaxInfo("GRESKA ()): Dekleracija designator statement, najverovatnije u if uslovu. ");	
			    	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Statement ::= IF LPAREN Condition NT$12 RPAREN Statement NT$13 ElseStatement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj cond = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
						s.ifAfterElseStatement();			
			    	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj cond = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
  
					 	s.ifAfterStatement();
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$13",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$12 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj cond = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					  	s.ifCondition();
			    	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$12",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Statement ::= error SEMI 
            {
              Object RESULT =null;
		
					 		
					 		if(parser.actParsList == true) 
					 			s.sintaxInfo("GRESKA (;): Lista parametra funkcije. ");
					 		else
					 			s.sintaxInfo("GRESKA (;): Dekleracija designator statement, najverovatnije pri dodeli vrednosti. ");
					 			
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Statement ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Statement ::= READ LPAREN Designator NT$11 RPAREN SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$11 ::= 
            {
              Object RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					     RESULT = s.statementRead(designator, designatorleft);
					     s.read(designator);
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ForStatement ::= FOR NT$10 LPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int forloopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int forloopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object forloop = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatement",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$10 ::= 
            {
              Object RESULT =null;
		int forloopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int forloopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object forloop = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
					 	parser.forLoopLevel++; 
					 	s.semanticDebug(forloopleft,"Uvecana dubina for petlje, dubina = " + parser.forLoopLevel); 
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = s.insertType(typeName, typeNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ClassVarDeclList ::= ClassVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ClassVarDeclList ::= ClassVarDeclList ClassVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ClassVarDecl ::= ClassStatic VarDeclList 
            {
              Object RESULT =null;
		 parser.isStaticFld = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ClassStatic ::= 
            {
              Object RESULT =null;
		 parser.isStaticFld = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassStatic",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ClassStatic ::= STATIC 
            {
              Object RESULT =null;
		 parser.isStaticFld = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassStatic",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ClassMethod ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethod",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ClassDecl ::= error LBRACE ClassBody RBRACE 
            {
              Object RESULT =null;
		 s.classError();  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ClassDecl ::= ClassDeclPreExt EXTENDS error LBRACE ClassBody RBRACE 
            {
              Object RESULT =null;
		 s.classError(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ClassDecl ::= ClassDeclPreExt NT$9 LBRACE ClassBody RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 s.endClass(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$9 ::= 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 s.addClass(className, classNameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ClassDecl ::= ClassDeclPreExt EXTENDS Type NT$8 LBRACE ClassBody RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int extendClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int extendClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct extendClass = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 s.endClass(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$8 ::= 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int extendClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int extendClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct extendClass = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

						s.classExtendCheck(className, extendClass, extendClassleft);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ClassBody ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBody",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ClassBody ::= ClassMethod 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBody",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ClassBody ::= ClassVarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBody",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ClassBody ::= ClassVarDeclList ClassMethod 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBody",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ClassDeclPreExt ::= CLASS IDENT 
            {
              String RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						RESULT = s.classStart(className, classNameleft);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDeclPreExt",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VarArgs ::= Type NT$7 DOT DOT DOT IDENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int varArgsNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varArgsNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varArgsName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 	Tab.insert(Obj.Var, varArgsName , new Struct(Struct.Array, varArgsType)); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarArgs",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$7 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 varArgsType = type; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormalParamDecl ::= Type NT$6 VarDef 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int formParmleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int formParmright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj formParm = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 s.formalParams(formParm); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$6 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parser.lastVarType = type; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FormalParamList ::= FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FormalParamList ::= error COMMA FormalParamDecl 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 s.methodError(fleft, ',', "Formalni parametar funkcije.");  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FormalParamList ::= FormalParamList COMMA FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FormPars ::= 
            {
              Object RESULT =null;
		 haveVarArgs = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FormPars ::= FormalParamList COMMA VarArgs 
            {
              Object RESULT =null;
		 haveVarArgs = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FormPars ::= VarArgs 
            {
              Object RESULT =null;
		
						haveVarArgs = true;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FormPars ::= FormalParamList 
            {
              Object RESULT =null;
		 haveVarArgs = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodType ::= VOID 
            {
              Struct RESULT =null;
		 RESULT = Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodType",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodType ::= Type 
            {
              Struct RESULT =null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct returnType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = returnType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodType",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodStatic ::= 
            {
              Object RESULT =null;
		 parser.isStatic = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodStatic",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodStatic ::= STATIC 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 s.staticCheck(stleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodStatic",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodDecl ::= MethodDeclPreVar VarDeclListE LBRACE NT$5 StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int lineleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int methodEndleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodEndright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object methodEnd = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						s.methodExit();
						s.methodReturnCheck(methodEndleft);
						s.methodEnd();
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$5 ::= 
            {
              Object RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

						s.methodEnter();	
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MethodDeclPreVar ::= MethodDeclPreFor error RPAREN 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
						methodErrorDetected = true;
						s.methodError(mleft, ')' , "Formalni parametar funkcije.");
					
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclPreVar",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MethodDeclPreVar ::= MethodDeclPreFor FormPars RPAREN 
            {
              Object RESULT =null;
		
						
					 	if(haveVarArgs){
					 		MehtodWithVarArgs.add(currentMethod);	
					 		currentMethod.setLevel(currMethodFormParams + 1);
					 	}
					 	else
					 		currentMethod.setLevel(currMethodFormParams);
					 	
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclPreVar",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodDeclPreFor ::= MethodStatic MethodType IDENT NT$4 LPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct returnType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
						// TODO notused?
						currMethodFormParams = 0; 
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclPreFor",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$4 ::= 
            {
              Object RESULT =null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct returnType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 					  
					 	s.insertMethodAndCount(methodNameleft, methodName, returnType);
					 	
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VarDef ::= IDENT 
            {
              Obj RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 	
			        	parser.isArray = false;
			        	s.variableCount();
						RESULT = s.insertVariable(varNameleft, varName);		
								  
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDef",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VarDef ::= IDENT QLBRACE NT$3 QRBRACE 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 
						s.variableCount();
						RESULT = s.insertVariable(varNameleft, varName);
						parser.isArray = false;
						
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDef",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              Obj RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
 parser.isArray = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VarDecl ::= VarDef 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarDecl ::= error COMMA VarDef 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 s.variableError(vleft, ',', false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarDecl ::= VarDecl COMMA VarDef 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarDeclList ::= VarType error 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct v = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 s.variableError(vleft, '{', true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarDeclList ::= VarType error SEMI 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct v = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 s.variableError(vleft, ';', true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDeclList ::= VarType VarDecl SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarType ::= Type 
            {
              Struct RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.lastVarType = varType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarType",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDeclListE ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclListE",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDeclListE ::= VarDeclListE VarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclListE",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Value ::= ASCII 
            {
              Obj RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			        	Obj o = new Obj(Obj.Con, "Constant char", Tab.charType);
						o.setAdr(c.charAt(1));
						RESULT = o;
			        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Value ::= BOOL 
            {
              Obj RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			         	Obj o = new Obj(Obj.Con, "Constant boolean" , s.boolType);
			          	o.setAdr((b.equals("false"))? 0 : 1);
						RESULT = o;

			         
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Value ::= NUMBER 
            {
              Obj RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						Obj o = new Obj(Obj.Con, "Constant number", Tab.intType);
						o.setAdr(n);
						RESULT = o;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDef ::= IDENT EQUAL Value 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int constValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constValue = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						s.constantCount();
					    s.insertConstant(constNameleft, constName, constValue );						 
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDef",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDecl ::= ConstDef 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDecl ::= ConstDecl COMMA ConstDef 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDeclList ::= CONST Type NT$2 ConstDecl SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int constTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int constTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct constType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 parser.lastConstType = Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =null;
		int constTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct constType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

						s.checkContantType(constTypeleft);
						parser.lastConstType = constType;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ProgramElem ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElem",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ProgramElem ::= VarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElem",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ProgramElem ::= ConstDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElem",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgramDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgramDeclList ::= ProgramDeclList ProgramElem 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgramName ::= IDENT 
            {
              Obj RESULT =null;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						RESULT = s.programStart(programName);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramName",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= PROGRAM NT$0 ProgramName ProgramDeclList LBRACE NT$1 MethodDeclList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int programObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int programObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj programObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		 

						s.checkMain();
						s.programEnd(programObj);
						
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int programObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int programObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj programObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
 parser.isGlobal = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.isGlobal = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

