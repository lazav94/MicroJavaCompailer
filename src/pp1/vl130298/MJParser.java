
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 02 20:20:58 CEST 2017
//----------------------------------------------------

package pp1.vl130298;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 02 20:20:58 CEST 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\236\000\002\074\002\000\002\075\002\000\002\002" +
    "\012\000\002\002\004\000\002\051\003\000\002\003\004" +
    "\000\002\003\002\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\076\002\000\002\010\007\000\002" +
    "\011\005\000\002\011\003\000\002\012\005\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\016\004" +
    "\000\002\016\002\000\002\054\003\000\002\013\005\000" +
    "\002\013\005\000\002\013\004\000\002\014\005\000\002" +
    "\014\005\000\002\014\003\000\002\077\002\000\002\015" +
    "\006\000\002\015\003\000\002\017\004\000\002\017\002" +
    "\000\002\100\002\000\002\023\007\000\002\022\005\000" +
    "\002\022\005\000\002\020\007\000\002\021\003\000\002" +
    "\021\002\000\002\055\003\000\002\055\003\000\002\024" +
    "\003\000\002\024\002\000\002\025\005\000\002\025\005" +
    "\000\002\025\003\000\002\026\004\000\002\101\002\000" +
    "\002\050\005\000\002\007\004\000\002\102\002\000\002" +
    "\103\002\000\002\005\012\000\002\104\002\000\002\005" +
    "\007\000\002\005\010\000\002\005\006\000\002\006\005" +
    "\000\002\006\002\000\002\053\003\000\002\030\004\000" +
    "\002\030\002\000\002\105\002\000\002\031\005\000\002" +
    "\027\004\000\002\027\004\000\002\106\002\000\002\027" +
    "\011\000\002\027\010\000\002\027\012\000\002\027\006" +
    "\000\002\027\004\000\002\027\004\000\002\027\004\000" +
    "\002\027\005\000\002\107\002\000\002\027\010\000\002" +
    "\110\002\000\002\027\010\000\002\027\011\000\002\027" +
    "\005\000\002\032\004\000\002\032\002\000\002\066\004" +
    "\000\002\065\005\000\002\111\002\000\002\065\006\000" +
    "\002\065\005\000\002\065\004\000\002\065\004\000\002" +
    "\065\002\000\002\033\003\000\002\033\002\000\002\034" +
    "\005\000\002\034\003\000\002\067\003\000\002\070\005" +
    "\000\002\070\003\000\002\072\003\000\002\071\005\000" +
    "\002\071\003\000\002\073\005\000\002\073\003\000\002" +
    "\063\004\000\002\063\003\000\002\057\004\000\002\112" +
    "\002\000\002\064\006\000\002\064\002\000\002\113\002" +
    "\000\002\061\005\000\002\037\005\000\002\037\002\000" +
    "\002\060\003\000\002\114\002\000\002\115\002\000\002" +
    "\060\010\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\004\000\002\060\007\000\002\060\007" +
    "\000\002\060\005\000\002\116\002\000\002\056\005\000" +
    "\002\035\004\000\002\035\002\000\002\036\003\000\002" +
    "\117\002\000\002\036\005\000\002\120\002\000\002\121" +
    "\002\000\002\036\007\000\002\062\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\042\003\000\002\042" +
    "\003\000\002\043\003\000\002\043\003\000\002\044\003" +
    "\000\002\044\003\000\002\045\003\000\002\045\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\004\004\005\001\002\000\004\002\u0103\001" +
    "\002\000\004\062\001\001\002\000\004\062\010\001\002" +
    "\000\014\003\ufffb\005\ufffb\011\ufffb\054\ufffb\062\ufffb\001" +
    "\002\000\014\003\ufffd\005\ufffd\011\ufffd\054\ufffd\062\ufffd" +
    "\001\002\000\014\003\023\005\024\011\025\054\014\062" +
    "\015\001\002\000\014\003\ufffa\005\ufffa\011\ufffa\054\ufffa" +
    "\062\ufffa\001\002\000\006\003\uffed\062\uffed\001\002\000" +
    "\012\007\000\010\000\055\000\062\000\001\002\000\066" +
    "\003\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\050" +
    "\uffc6\051\uffc6\053\uffc6\054\uffc6\056\uffc6\057\uffc6\062\uffc6" +
    "\001\002\000\014\003\ufff9\005\ufff9\011\ufff9\054\ufff9\062" +
    "\ufff9\001\002\000\014\003\ufffc\005\ufffc\011\ufffc\054\ufffc" +
    "\062\ufffc\001\002\000\006\006\361\054\uffcc\001\002\000" +
    "\006\003\350\062\076\001\002\000\014\003\ufff8\005\ufff8" +
    "\011\ufff8\054\ufff8\062\ufff8\001\002\000\004\054\045\001" +
    "\002\000\004\062\uffd2\001\002\000\004\062\015\001\002" +
    "\000\004\062\ufff7\001\002\000\004\062\031\001\002\000" +
    "\006\050\041\051\040\001\002\000\004\023\033\001\002" +
    "\000\006\050\ufff4\051\ufff4\001\002\000\010\061\036\063" +
    "\037\064\034\001\002\000\006\050\ufff0\051\ufff0\001\002" +
    "\000\006\050\ufff3\051\ufff3\001\002\000\006\050\ufff2\051" +
    "\ufff2\001\002\000\006\050\ufff1\051\ufff1\001\002\000\004" +
    "\062\031\001\002\000\014\003\ufff6\005\ufff6\011\ufff6\054" +
    "\ufff6\062\ufff6\001\002\000\006\050\ufff5\051\ufff5\001\002" +
    "\000\004\062\044\001\002\000\006\006\uffd1\054\uffd1\001" +
    "\002\000\010\054\uffee\055\uffee\062\uffee\001\002\000\004" +
    "\055\347\001\002\000\010\054\050\055\uffc7\062\015\001" +
    "\002\000\012\007\uffe2\010\uffe2\055\uffe2\062\uffe2\001\002" +
    "\000\010\054\uffef\055\uffef\062\uffef\001\002\000\004\055" +
    "\uffd0\001\002\000\012\007\054\010\uffdb\055\056\062\uffdb" +
    "\001\002\000\006\010\uffdc\062\uffdc\001\002\000\006\054" +
    "\uffee\062\uffee\001\002\000\004\055\uffc8\001\002\000\012" +
    "\007\uffe3\010\uffe3\055\uffe3\062\uffe3\001\002\000\006\010" +
    "\104\062\015\001\002\000\010\003\063\053\uffd7\062\015" +
    "\001\002\000\004\062\076\001\002\000\006\051\072\053" +
    "\073\001\002\000\006\051\070\053\uffd8\001\002\000\004" +
    "\053\067\001\002\000\006\051\uffd4\053\uffd4\001\002\000" +
    "\006\054\uffdf\062\uffdf\001\002\000\004\062\015\001\002" +
    "\000\006\051\uffd6\053\uffd6\001\002\000\004\062\015\001" +
    "\002\000\006\054\uffde\062\uffde\001\002\000\006\051\uffd5" +
    "\053\uffd5\001\002\000\006\051\uffd3\053\uffd3\001\002\000" +
    "\012\050\uffe4\051\uffe4\053\uffe4\056\077\001\002\000\004" +
    "\057\uffe6\001\002\000\004\057\101\001\002\000\010\050" +
    "\uffe5\051\uffe5\053\uffe5\001\002\000\004\062\105\001\002" +
    "\000\004\062\uffda\001\002\000\004\062\uffd9\001\002\000" +
    "\004\052\uffe1\001\002\000\004\052\107\001\002\000\010" +
    "\003\uffe0\053\uffe0\062\uffe0\001\002\000\006\054\111\062" +
    "\015\001\002\000\032\003\uffc4\012\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\017\uffc4\020\uffc4\022\uffc4\050\uffc4\054\uffc4\055" +
    "\uffc4\062\uffc4\001\002\000\032\003\126\012\116\013\133" +
    "\014\123\015\122\017\127\020\113\022\131\050\uffa7\054" +
    "\114\055\132\062\115\001\002\000\004\052\342\001\002" +
    "\000\032\003\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\017" +
    "\uffc4\020\uffc4\022\uffc4\050\uffc4\054\uffc4\055\uffc4\062\uffc4" +
    "\001\002\000\074\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027" +
    "\uff7b\030\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b" +
    "\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044" +
    "\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b" +
    "\053\uff7b\056\uff7b\057\uff7b\060\uff7b\062\uff7b\001\002\000" +
    "\004\052\uffc3\001\002\000\024\023\331\041\210\042\211" +
    "\043\165\044\156\045\160\046\332\047\333\052\334\001" +
    "\002\000\010\003\314\050\uffa7\062\115\001\002\000\024" +
    "\003\307\021\uffac\025\uffac\052\uffac\053\uffac\061\uffac\062" +
    "\uffac\063\uffac\064\uffac\001\002\000\004\052\252\001\002" +
    "\000\004\050\251\001\002\000\004\050\250\001\002\000" +
    "\032\003\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5" +
    "\020\uffc5\022\uffc5\050\uffc5\054\uffc5\055\uffc5\062\uffc5\001" +
    "\002\000\004\050\247\001\002\000\004\052\236\001\002" +
    "\000\074\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030" +
    "\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85" +
    "\037\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045" +
    "\uff85\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85" +
    "\056\uff85\057\uff85\060\uff85\062\uff85\001\002\000\022\021" +
    "\141\025\135\050\144\052\150\061\143\062\115\063\137" +
    "\064\146\001\002\000\012\007\uffdd\010\uffdd\055\uffdd\062" +
    "\uffdd\001\002\000\004\050\134\001\002\000\034\003\uffba" +
    "\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020" +
    "\uffba\022\uffba\050\uffba\054\uffba\055\uffba\062\uffba\001\002" +
    "\000\016\021\141\052\150\061\143\062\115\063\137\064" +
    "\146\001\002\000\042\024\uff95\025\uff95\031\uff95\032\uff95" +
    "\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041" +
    "\uff95\042\uff95\050\uff95\051\uff95\053\uff95\057\uff95\001\002" +
    "\000\056\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031" +
    "\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a" +
    "\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\050" +
    "\uff8a\051\uff8a\053\uff8a\057\uff8a\001\002\000\004\050\206" +
    "\001\002\000\004\062\015\001\002\000\060\024\uff90\025" +
    "\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90" +
    "\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042" +
    "\uff90\043\uff90\044\uff90\045\uff90\050\uff90\051\uff90\052\167" +
    "\053\uff90\057\uff90\001\002\000\056\024\uff8c\025\uff8c\026" +
    "\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c" +
    "\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043" +
    "\uff8c\044\uff8c\045\uff8c\050\uff8c\051\uff8c\053\uff8c\057\uff8c" +
    "\001\002\000\034\003\uffb8\012\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\022\uffb8\050\uffb8\054\uffb8" +
    "\055\uffb8\062\uffb8\001\002\000\042\024\uff99\025\uff99\031" +
    "\uff99\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99" +
    "\040\uff99\041\uff99\042\uff99\050\uff99\051\uff99\053\uff99\057" +
    "\uff99\001\002\000\056\024\uff8b\025\uff8b\026\uff8b\027\uff8b" +
    "\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036" +
    "\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b" +
    "\045\uff8b\050\uff8b\051\uff8b\053\uff8b\057\uff8b\001\002\000" +
    "\056\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94" +
    "\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040" +
    "\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\050\uff94" +
    "\051\uff94\053\uff94\057\uff94\001\002\000\020\021\141\025" +
    "\135\052\150\061\143\062\115\063\137\064\146\001\002" +
    "\000\004\053\152\001\002\000\056\024\uff86\025\uff86\026" +
    "\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86" +
    "\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043" +
    "\uff86\044\uff86\045\uff86\050\uff86\051\uff86\053\uff86\057\uff86" +
    "\001\002\000\056\024\uff91\025\uff91\026\uff91\027\uff91\030" +
    "\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036\uff91" +
    "\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045" +
    "\uff91\050\uff91\051\uff91\053\uff91\057\uff91\001\002\000\056" +
    "\024\uff93\025\uff93\026\164\027\161\030\157\031\uff93\032" +
    "\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93" +
    "\041\uff93\042\uff93\043\165\044\156\045\160\050\uff93\051" +
    "\uff93\053\uff93\057\uff93\001\002\000\016\021\uff6a\052\uff6a" +
    "\061\uff6a\062\uff6a\063\uff6a\064\uff6a\001\002\000\020\021" +
    "\uff65\025\uff65\052\uff65\061\uff65\062\uff65\063\uff65\064\uff65" +
    "\001\002\000\016\021\uff67\052\uff67\061\uff67\062\uff67\063" +
    "\uff67\064\uff67\001\002\000\020\021\uff64\025\uff64\052\uff64" +
    "\061\uff64\062\uff64\063\uff64\064\uff64\001\002\000\016\021" +
    "\uff68\052\uff68\061\uff68\062\uff68\063\uff68\064\uff68\001\002" +
    "\000\016\021\141\052\150\061\143\062\115\063\137\064" +
    "\146\001\002\000\016\021\uff6b\052\uff6b\061\uff6b\062\uff6b" +
    "\063\uff6b\064\uff6b\001\002\000\016\021\uff69\052\uff69\061" +
    "\uff69\062\uff69\063\uff69\064\uff69\001\002\000\020\021\uff66" +
    "\025\uff66\052\uff66\061\uff66\062\uff66\063\uff66\064\uff66\001" +
    "\002\000\056\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92" +
    "\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037" +
    "\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92" +
    "\050\uff92\051\uff92\053\uff92\057\uff92\001\002\000\022\021" +
    "\uff8f\025\uff8f\052\uff8f\053\uff8f\061\uff8f\062\uff8f\063\uff8f" +
    "\064\uff8f\001\002\000\022\021\141\025\135\052\150\053" +
    "\uffa5\061\143\062\115\063\137\064\146\001\002\000\006" +
    "\051\176\053\uffa6\001\002\000\006\051\uffa3\053\uffa3\001" +
    "\002\000\004\053\uff8e\001\002\000\004\053\175\001\002" +
    "\000\056\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031" +
    "\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d" +
    "\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\050" +
    "\uff8d\051\uff8d\053\uff8d\057\uff8d\001\002\000\020\021\141" +
    "\025\135\052\150\061\143\062\115\063\137\064\146\001" +
    "\002\000\006\051\uffa4\053\uffa4\001\002\000\060\024\uff89" +
    "\025\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033" +
    "\uff89\034\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89" +
    "\042\uff89\043\uff89\044\uff89\045\uff89\050\uff89\051\uff89\053" +
    "\uff89\056\201\057\uff89\001\002\000\022\003\203\021\141" +
    "\025\135\052\150\061\143\062\115\063\137\064\146\001" +
    "\002\000\004\057\205\001\002\000\004\057\204\001\002" +
    "\000\056\024\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031" +
    "\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036\uff87\037\uff87" +
    "\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\050" +
    "\uff87\051\uff87\053\uff87\057\uff87\001\002\000\056\024\uff88" +
    "\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88\033" +
    "\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040\uff88\041\uff88" +
    "\042\uff88\043\uff88\044\uff88\045\uff88\050\uff88\051\uff88\053" +
    "\uff88\057\uff88\001\002\000\034\003\uffb7\012\uffb7\013\uffb7" +
    "\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\022\uffb7\050" +
    "\uffb7\054\uffb7\055\uffb7\062\uffb7\001\002\000\042\024\212" +
    "\025\213\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036" +
    "\uff98\037\uff98\040\uff98\041\210\042\211\050\uff98\051\uff98" +
    "\053\uff98\057\uff98\001\002\000\020\021\uff6d\025\uff6d\052" +
    "\uff6d\061\uff6d\062\uff6d\063\uff6d\064\uff6d\001\002\000\020" +
    "\021\uff6c\025\uff6c\052\uff6c\061\uff6c\062\uff6c\063\uff6c\064" +
    "\uff6c\001\002\000\016\021\uff6f\052\uff6f\061\uff6f\062\uff6f" +
    "\063\uff6f\064\uff6f\001\002\000\016\021\uff6e\052\uff6e\061" +
    "\uff6e\062\uff6e\063\uff6e\064\uff6e\001\002\000\016\021\uff70" +
    "\052\uff70\061\uff70\062\uff70\063\uff70\064\uff70\001\002\000" +
    "\016\021\uff97\052\uff97\061\uff97\062\uff97\063\uff97\064\uff97" +
    "\001\002\000\016\021\uff71\052\uff71\061\uff71\062\uff71\063" +
    "\uff71\064\uff71\001\002\000\016\021\141\052\150\061\143" +
    "\062\115\063\137\064\146\001\002\000\042\024\uff96\025" +
    "\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96" +
    "\037\uff96\040\uff96\041\uff96\042\uff96\050\uff96\051\uff96\053" +
    "\uff96\057\uff96\001\002\000\042\024\uff9a\025\uff9a\031\uff9a" +
    "\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040" +
    "\uff9a\041\uff9a\042\uff9a\050\uff9a\051\uff9a\053\uff9a\057\uff9a" +
    "\001\002\000\074\023\uff82\024\uff82\025\uff82\026\uff82\027" +
    "\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035\uff82" +
    "\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044" +
    "\uff82\045\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82" +
    "\053\uff82\056\uff82\057\uff82\060\uff82\062\uff82\001\002\000" +
    "\074\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84" +
    "\031\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037" +
    "\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84" +
    "\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84\056" +
    "\226\057\uff84\060\227\062\115\001\002\000\074\023\uff81" +
    "\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031\uff81\032" +
    "\uff81\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81" +
    "\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047" +
    "\uff81\050\uff81\051\uff81\052\uff81\053\uff81\056\uff81\057\uff81" +
    "\060\uff81\062\uff81\001\002\000\074\023\uff83\024\uff83\025" +
    "\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83" +
    "\034\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042" +
    "\uff83\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83\050\uff83" +
    "\051\uff83\052\uff83\053\uff83\056\uff83\057\uff83\060\uff83\062" +
    "\uff83\001\002\000\020\021\uff7e\025\uff7e\052\uff7e\061\uff7e" +
    "\062\uff7e\063\uff7e\064\uff7e\001\002\000\004\062\uff80\001" +
    "\002\000\004\062\115\001\002\000\074\023\uff7f\024\uff7f" +
    "\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033" +
    "\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f" +
    "\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050" +
    "\uff7f\051\uff7f\052\uff7f\053\uff7f\056\uff7f\057\uff7f\060\uff7f" +
    "\062\uff7f\001\002\000\020\021\141\025\135\052\150\061" +
    "\143\062\115\063\137\064\146\001\002\000\004\057\uff7d" +
    "\001\002\000\004\057\235\001\002\000\074\023\uff7c\024" +
    "\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c" +
    "\033\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041" +
    "\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c" +
    "\050\uff7c\051\uff7c\052\uff7c\053\uff7c\056\uff7c\057\uff7c\060" +
    "\uff7c\062\uff7c\001\002\000\020\021\141\025\135\052\150" +
    "\061\143\062\115\063\137\064\146\001\002\000\006\051" +
    "\240\053\uffb4\001\002\000\004\061\244\001\002\000\004" +
    "\053\242\001\002\000\004\050\243\001\002\000\034\003" +
    "\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\022\uffb3\050\uffb3\054\uffb3\055\uffb3\062\uffb3\001" +
    "\002\000\004\053\245\001\002\000\004\050\246\001\002" +
    "\000\034\003\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016" +
    "\uffb2\017\uffb2\020\uffb2\022\uffb2\050\uffb2\054\uffb2\055\uffb2" +
    "\062\uffb2\001\002\000\034\003\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\022\uffc0\050\uffc0" +
    "\054\uffc0\055\uffc0\062\uffc0\001\002\000\034\003\uffc1\012" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1" +
    "\022\uffc1\050\uffc1\054\uffc1\055\uffc1\062\uffc1\001\002\000" +
    "\034\003\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\022\uffb9\050\uffb9\054\uffb9\055\uffb9\062" +
    "\uffb9\001\002\000\022\003\257\021\141\025\135\052\150" +
    "\061\143\062\115\063\137\064\146\001\002\000\012\037" +
    "\uff9d\040\uff9d\050\uff9d\053\uff9d\001\002\000\010\040\305" +
    "\050\uffa2\053\uffa2\001\002\000\026\031\300\032\277\033" +
    "\302\034\276\035\303\036\275\037\uff9b\040\uff9b\050\uff9b" +
    "\053\uff9b\001\002\000\012\037\273\040\uff9f\050\uff9f\053" +
    "\uff9f\001\002\000\004\053\270\001\002\000\010\040\uffa0" +
    "\050\uffa0\053\uffa0\001\002\000\004\053\uffbf\001\002\000" +
    "\004\053\263\001\002\000\030\003\126\012\116\013\133" +
    "\014\123\015\122\017\127\020\113\022\131\050\uffa7\054" +
    "\114\062\115\001\002\000\034\003\uffaf\012\uffaf\013\uffaf" +
    "\014\uffaf\015\uffaf\016\265\017\uffaf\020\uffaf\022\uffaf\050" +
    "\uffaf\054\uffaf\055\uffaf\062\uffaf\001\002\000\030\003\126" +
    "\012\116\013\133\014\123\015\122\017\127\020\113\022" +
    "\131\050\uffa7\054\114\062\115\001\002\000\034\003\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\022\uffbe\050\uffbe\054\uffbe\055\uffbe\062\uffbe\001\002" +
    "\000\034\003\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\uffb0\022\uffb0\050\uffb0\054\uffb0\055\uffb0" +
    "\062\uffb0\001\002\000\030\003\126\012\116\013\133\014" +
    "\123\015\122\017\127\020\113\022\131\050\uffa7\054\114" +
    "\062\115\001\002\000\034\003\uffaf\012\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\016\265\017\uffaf\020\uffaf\022\uffaf\050\uffaf" +
    "\054\uffaf\055\uffaf\062\uffaf\001\002\000\034\003\uffbd\012" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\022\uffbd\050\uffbd\054\uffbd\055\uffbd\062\uffbd\001\002\000" +
    "\020\021\141\025\135\052\150\061\143\062\115\063\137" +
    "\064\146\001\002\000\012\037\uff9e\040\uff9e\050\uff9e\053" +
    "\uff9e\001\002\000\020\021\uff72\025\uff72\052\uff72\061\uff72" +
    "\062\uff72\063\uff72\064\uff72\001\002\000\020\021\uff74\025" +
    "\uff74\052\uff74\061\uff74\062\uff74\063\uff74\064\uff74\001\002" +
    "\000\020\021\uff76\025\uff76\052\uff76\061\uff76\062\uff76\063" +
    "\uff76\064\uff76\001\002\000\020\021\uff77\025\uff77\052\uff77" +
    "\061\uff77\062\uff77\063\uff77\064\uff77\001\002\000\020\021" +
    "\141\025\135\052\150\061\143\062\115\063\137\064\146" +
    "\001\002\000\020\021\uff75\025\uff75\052\uff75\061\uff75\062" +
    "\uff75\063\uff75\064\uff75\001\002\000\020\021\uff73\025\uff73" +
    "\052\uff73\061\uff73\062\uff73\063\uff73\064\uff73\001\002\000" +
    "\012\037\uff9c\040\uff9c\050\uff9c\053\uff9c\001\002\000\020" +
    "\021\141\025\135\052\150\061\143\062\115\063\137\064" +
    "\146\001\002\000\010\040\uffa1\050\uffa1\053\uffa1\001\002" +
    "\000\004\053\313\001\002\000\022\021\141\025\135\052" +
    "\150\053\uffa5\061\143\062\115\063\137\064\146\001\002" +
    "\000\004\053\312\001\002\000\006\050\uffab\053\uffab\001" +
    "\002\000\006\050\uffaa\053\uffaa\001\002\000\004\053\324" +
    "\001\002\000\004\050\316\001\002\000\020\021\141\025" +
    "\135\052\150\061\143\062\115\063\137\064\146\001\002" +
    "\000\004\050\320\001\002\000\006\053\uffa7\062\115\001" +
    "\002\000\004\053\322\001\002\000\030\003\126\012\116" +
    "\013\133\014\123\015\122\017\127\020\113\022\131\050" +
    "\uffa7\054\114\062\115\001\002\000\034\003\uffbc\012\uffbc" +
    "\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\022" +
    "\uffbc\050\uffbc\054\uffbc\055\uffbc\062\uffbc\001\002\000\030" +
    "\003\126\012\116\013\133\014\123\015\122\017\127\020" +
    "\113\022\131\050\uffa7\054\114\062\115\001\002\000\034" +
    "\003\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\022\uffbb\050\uffbb\054\uffbb\055\uffbb\062\uffbb" +
    "\001\002\000\020\021\uff78\025\uff78\052\uff78\061\uff78\062" +
    "\uff78\063\uff78\064\uff78\001\002\000\020\021\uff79\025\uff79" +
    "\052\uff79\061\uff79\062\uff79\063\uff79\064\uff79\001\002\000" +
    "\020\021\141\025\135\052\150\061\143\062\115\063\137" +
    "\064\146\001\002\000\020\021\uff7a\025\uff7a\052\uff7a\061" +
    "\uff7a\062\uff7a\063\uff7a\064\uff7a\001\002\000\006\050\uffa9" +
    "\053\uffa9\001\002\000\006\050\uffa8\053\uffa8\001\002\000" +
    "\024\003\uffae\021\uffae\025\uffae\052\uffae\053\uffae\061\uffae" +
    "\062\uffae\063\uffae\064\uffae\001\002\000\006\050\uffad\053" +
    "\uffad\001\002\000\004\052\337\001\002\000\010\003\uffc2" +
    "\050\uffc2\062\uffc2\001\002\000\032\003\126\012\116\013" +
    "\133\014\123\015\122\017\127\020\113\022\131\050\uffa7" +
    "\054\114\055\341\062\115\001\002\000\034\003\uffb1\012" +
    "\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\022\uffb1\050\uffb1\054\uffb1\055\uffb1\062\uffb1\001\002\000" +
    "\004\062\115\001\002\000\004\053\uffb6\001\002\000\004" +
    "\053\345\001\002\000\004\050\346\001\002\000\034\003" +
    "\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5" +
    "\020\uffb5\022\uffb5\050\uffb5\054\uffb5\055\uffb5\062\uffb5\001" +
    "\002\000\014\003\uffc9\005\uffc9\011\uffc9\054\uffc9\062\uffc9" +
    "\001\002\000\022\003\uffea\005\uffea\011\uffea\050\357\051" +
    "\356\054\uffea\055\uffea\062\uffea\001\002\000\006\050\354" +
    "\051\353\001\002\000\006\050\uffe7\051\uffe7\001\002\000" +
    "\004\062\076\001\002\000\016\003\uffec\005\uffec\011\uffec" +
    "\054\uffec\055\uffec\062\uffec\001\002\000\006\050\uffe9\051" +
    "\uffe9\001\002\000\004\062\076\001\002\000\016\003\uffeb" +
    "\005\uffeb\011\uffeb\054\uffeb\055\uffeb\062\uffeb\001\002\000" +
    "\006\050\uffe8\051\uffe8\001\002\000\006\003\366\062\uffcf" +
    "\001\002\000\004\054\363\001\002\000\010\054\uffee\055" +
    "\uffee\062\uffee\001\002\000\004\055\365\001\002\000\014" +
    "\003\uffcb\005\uffcb\011\uffcb\054\uffcb\062\uffcb\001\002\000" +
    "\004\054\375\001\002\000\004\062\015\001\002\000\004" +
    "\054\uffce\001\002\000\004\054\372\001\002\000\010\054" +
    "\uffee\055\uffee\062\uffee\001\002\000\004\055\374\001\002" +
    "\000\014\003\uffcd\005\uffcd\011\uffcd\054\uffcd\062\uffcd\001" +
    "\002\000\010\054\uffee\055\uffee\062\uffee\001\002\000\004" +
    "\055\377\001\002\000\014\003\uffca\005\uffca\011\uffca\054" +
    "\uffca\062\uffca\001\002\000\012\007\uffe2\010\uffe2\055\uffe2" +
    "\062\uffe2\001\002\000\012\007\054\010\uffdb\055\u0102\062" +
    "\uffdb\001\002\000\004\002\uffff\001\002\000\004\002\ufffe" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\074\005\001\001\000\004\051\006\001\001\000\004" +
    "\003\010\001\001\000\002\001\001\000\020\004\016\005" +
    "\021\010\011\013\015\050\017\053\012\054\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\075\377\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\104\361\001\001\000\006\014\350\015\351\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\042" +
    "\001\001\000\004\053\025\001\001\000\004\076\026\001" +
    "\001\000\006\011\027\012\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\045\016\046\001\001\000\002\001\001\000" +
    "\012\006\051\013\050\053\012\054\020\001\001\000\004" +
    "\017\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\020\056\021\057\022\054\023\060\001\001\000\002" +
    "\001\001\000\004\016\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\053\102\055\101\001\001\000\012" +
    "\024\064\025\063\026\065\053\061\001\001\000\004\015" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\070\053\061\001\001\000\002\001\001\000\006\026\073" +
    "\053\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\100\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\050\053" +
    "\012\054\020\001\001\000\004\030\111\001\001\000\016" +
    "\027\124\031\117\056\116\062\127\065\123\066\120\001" +
    "\001\000\002\001\001\000\004\030\337\001\001\000\002" +
    "\001\001\000\004\105\335\001\001\000\010\040\327\044" +
    "\326\047\325\001\001\000\012\056\116\062\127\065\314" +
    "\066\120\001\001\000\004\111\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\116\221\001" +
    "\001\000\016\056\141\057\137\060\146\061\144\062\127" +
    "\063\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\056\141\060\146\061\220\062\127" +
    "\001\001\000\004\064\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\113\152\001\001\000\016\056\141" +
    "\057\150\060\146\061\144\062\127\063\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\153\001\001" +
    "\000\010\045\161\046\162\047\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\056\141\060\165\062\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\114\167\001\001\000\022\033" +
    "\172\034\170\056\141\057\171\060\146\061\144\062\127" +
    "\063\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\115\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\056\141\057\176\060\146\061\144\062\127\063" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\056\141\057\201\060\146\061\144\062\127\063\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\042\214\043" +
    "\215\044\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\112\216\001\001\000\002\001\001\000\012\056\141" +
    "\060\146\061\217\062\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\222\001\001\000\006\036\224" +
    "\062\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\120\231\001\001\000\004\117\227\001\001\000\004" +
    "\062\230\001\001\000\002\001\001\000\016\056\141\057" +
    "\232\060\146\061\144\062\127\063\135\001\001\000\004" +
    "\121\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\056\141\057\236\060\146\061\144\062\127\063\135" +
    "\001\001\000\004\110\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\056\141" +
    "\057\254\060\146\061\144\062\127\063\135\067\260\070" +
    "\253\071\255\072\257\073\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\300\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\106\261" +
    "\001\001\000\002\001\001\000\016\027\263\031\117\056" +
    "\116\062\127\065\123\066\120\001\001\000\004\032\265" +
    "\001\001\000\016\027\266\031\117\056\116\062\127\065" +
    "\123\066\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\027\270\031\117\056\116\062\127\065\123\066" +
    "\120\001\001\000\004\032\271\001\001\000\002\001\001" +
    "\000\020\056\141\057\254\060\146\061\144\062\127\063" +
    "\135\073\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\056\141\057\303\060\146\061\144\062\127\063\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\056\141\057\254\060\146\061\144\062\127" +
    "\063\135\071\255\072\305\073\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\033\310\034\170\056\141" +
    "\057\171\060\146\061\144\062\127\063\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\056\141\057\254\060" +
    "\146\061\144\062\127\063\135\067\316\070\253\071\255" +
    "\072\257\073\252\001\001\000\002\001\001\000\012\056" +
    "\116\062\127\065\320\066\120\001\001\000\002\001\001" +
    "\000\016\027\322\031\117\056\116\062\127\065\123\066" +
    "\120\001\001\000\002\001\001\000\016\027\324\031\117" +
    "\056\116\062\127\065\123\066\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\056\141" +
    "\057\334\060\146\061\144\062\127\063\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\027\124\031\117\056\116\062\127\065\123" +
    "\066\120\001\001\000\002\001\001\000\006\056\342\062" +
    "\127\001\001\000\004\107\343\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\354\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\357\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\102\366\001\001\000\002\001\001\000\006\007" +
    "\363\016\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\367\001\001\000\004\103" +
    "\370\001\001\000\002\001\001\000\006\007\372\016\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\375\016\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\u0100\001\001\000\012\020\056\021\057\022" +
    "\054\023\060\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 3;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

		     Singleton s = Singleton.getInstance();
		     s.initSymbolTable();
		  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

			  Singleton s = Singleton.getInstance();
		      Symbol symbol = this.getScanner().next_token();
			      if (symbol != null && symbol.value != null) 
				      s.log.info(symbol.toString() + " " + symbol.value.toString());
			  return symbol;
		  
    }

//vidljivo za parser

				public void report_fatal_error(String message, Object info) throws java.lang.Exception {
     			    done_parsing();
      			    report_error(message, info);
    			}
  
			    public void syntax_error(Symbol cur_token) {
			        report_error("Sintaksna greska na liniji " + cur_token.left  , cur_token);
			    }
			  
			    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
			        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
			    }
			    
			    
			     public void report_error(String message, Object info) {
			    	errorDectected = true;
			    	s.log.error(message);
			    }
			    
			    public void report_info(String message, Object info) {
			        s.log.info("WTF info (search in cup)");	
			    }
    
				Singleton s = Singleton.getInstance();
			    public static final Struct boolType = new Struct(Struct.Bool); // Struct for Bool type !
				public static final Obj    boolObj  = new Obj(Obj.Type, "bool" , boolType); // Obj za boolType
				public static final int constLevel  = 0;

				Struct lastConstType = Tab.noType;
				Struct lastVarType = Tab.noType;
				Obj lastDesignator = null;

				int globalVariables     = 0; // definicija globalnih promenljivih  -> ako se nalazi u globalnom opsegu definicije promenljivih
				int localMainVariables  = 0; // definicija lokalnih promeljivih (u main funkciji)
				int globalConstants     = 0; // definicije globalnih konstanti
				int globalArrays	    = 0; // deleracije globalnih nizova
	

				int glAndStMethInClass  = 0; // definicija globalniih i statickih funkicja unutrasnjih klasa
				int blocks              = 0; // blokovi naredbi
				int calledFuncMain      = 0; // poziv funkicje u telu metode main
				int fomalArgMeth        = 0; // delaracija formalnih argumenata funkcije 
		
				int defInnerClass 		= 0; // definicjije unutrasnjih klasa
				int defInnerClassMeth   = 0; // defiicije metoda unutrasnjih klasa
				int dekFieldsInnerClass = 0; // deklaracija polja unutrasnjih klasa
	
				boolean isArray      = false,      // niz      ili skalar
						isGlobal     = false,      // globalno ili lokalno 
						isClass      = false,      // klasa    ili nesto drugo
						isMain       = false,      // main fja ili nesto drugo
						isStatic     = false,      // staticna ili nesto drugo
						isFunct      = false,	   //  func    ili nesto drugo
						isDot		 = false,      //  . se pojavila
						isArrayElem  = false;      // [expr!] element niza 
			
			
				boolean isAssign     = false;      // da li se radi dodela vrednosti
				boolean actParsList  = false;
				int forLoop      = 0;              // da li je for petlja? // ako je nula nije for petlja ako je veci broj to znaci da je for ili ugnezdeni for
	
				
	
				boolean errorDectected = false;
				
				Struct returnType = null;
			 
			 
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {

 
				Singleton s = Singleton.getInstance();
				Obj currentMethod        = null;    // ima informaciju o funkciji koja se trenutno obradjuje
				int currMethodFormParams = 0;       // broj formalnih parametra funckije
				int currMethodActParams  = 0;       // broj stvarnih parametra funckije

				boolean methodErrorDetected = false; // da li se desila greska kod parsiranja metoode
				Obj currentClass    = null;    // ima informaciju o klasi koja se trenutno obradjuje
				boolean returnFound = false; // koristi se kada fja treba da vrati vredonost !
			
				
				boolean haveMain = false; // da li imamo main fju u programu
				
				Obj prevCondFact = null;
				Obj prevCondTerm = null;
	
	 
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // MulopRight ::= MOEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // MulopRight ::= DEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // MulopRight ::= MUEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // MulopLeft ::= MOD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // MulopLeft ::= DIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // MulopLeft ::= MUL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Mulop ::= MulopRight 
            {
              Object RESULT =null;
		 RESULT = 1; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Mulop ::= MulopLeft 
            {
              Object RESULT =null;
		 RESULT = 0; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // AddopRight ::= MEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // AddopRight ::= PEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // AddopLeft ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // AddopLeft ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Addop ::= AddopRight 
            {
              Object RESULT =null;
		 RESULT = 1; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Addop ::= AddopLeft 
            {
              Object RESULT =null;
		 RESULT = 0; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Relop ::= GEQ 
            {
              Object RESULT =null;
		 RESULT = 6; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Relop ::= GTR 
            {
              Object RESULT =null;
		 RESULT = 5; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Relop ::= LEQ 
            {
              Object RESULT =null;
		 RESULT = 4; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Relop ::= LSS 
            {
              Object RESULT =null;
		 RESULT = 3; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Relop ::= NEQ 
            {
              Object RESULT =null;
		 RESULT = 2; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Relop ::= EQU 
            {
              Object RESULT =null;
		 RESULT = 1; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Assignop ::= MulopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Assignop ::= AddopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Assignop ::= EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DesignatorIdent ::= IDENT 
            {
              Obj RESULT =null;
		int symbolNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int symbolNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String symbolName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					 	Obj symbol = Tab.find(symbolName);
					 	StringBuilder msg = new StringBuilder("Koriscenje ");
					 	if(symbol != Tab.noObj){
					 	     
					 	     switch(symbol.getKind()){
					 	        case Obj.Con:  msg.append("konstante '");     break;
					 	        case Obj.Var:
					 	            msg.append((symbol.getLevel() == 0) ? "(globalna) ":"(lokalna) " );
					 	            if(symbol.getType().getKind() == Struct.Array) 
					 	            	msg.append("niza '");
					 	        	else
					 	        	msg.append("promenljive '");
					 	        	break;
					 	        case Obj.Type: msg.append("tipa!!! '");       break;
					 	        case Obj.Meth: msg.append("metode '");        break;
					 	        case Obj.Fld:  msg.append("polja klasa '");   break;
					 	        case Obj.Elem: msg.append("elementa niza '"); break;
					 	        case Obj.Prog: msg.append("programa!!! '");   break;
					 	    }
					 	    msg.append(symbolName);
					 	    msg.append("' na liniji: ");
					 	    msg.append(symbolNameleft);
					 	    s.sintaxInfo(msg.toString());
					 	}
					 	else
					 		s.sintaxError(symbolNameleft, "Simbol '" + symbolName + "' ne postoji u tabeli simbola!");
					 	RESULT = symbol;
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorIdent",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DesignatorElem ::= QLBRACE NT$20 Expr NT$21 QRBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.isArrayElem = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorElem",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 RESULT = expr; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$21",79, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$20 ::= 
            {
              Object RESULT =null;
 parser.isArrayElem = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$20",78, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DesignatorElem ::= DOT NT$19 DesignatorIdent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int designatorIdenleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorIdenright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designatorIden = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				
					/*	if(parser.lastDesignator.getType().getKind() == Struct.Class){
							System.out.println("radi!");
							RESULT = designatorIden;
						} else {
							s.sintaxError(designatorIdenleft, "Posle . designator mora da bude klasnog tipa ");
							RESULT = new Obj(Obj.Con, "", Tab.noType);
						}
						parser.lastDesignator = designatorIden;
					*/
						RESULT = designatorIden;
						parser.isDot = false; 
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorElem",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$19 ::= 
            {
              Object RESULT =null;
 parser.isDot = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$19",77, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DesignatorElem ::= DesignatorIdent 
            {
              Object RESULT =null;
		int designatorIdenleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorIdenright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designatorIden = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorElem",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DesignatorList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DesignatorList ::= DesignatorList DesignatorElem 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Designator ::= DesignatorIdent NT$18 DesignatorList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$18 ::= 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
						parser.lastDesignator = designator;
						RESULT = designator; 
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$18",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Factor ::= LPAREN Expr RPAREN 
            {
              Obj RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
						// Expr treba da bude tipa Obj
						RESULT = expr; 
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Factor ::= NEW Type QLBRACE error QRBRACE 
            {
              Obj RESULT =null;
		
						s.sintaxInfo("GRESKA (]): Izraz za indeksiranje. ");	
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Factor ::= NEW Type QLBRACE Expr QRBRACE 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Factor ::= NEW Type 
            {
              Obj RESULT =null;
		 RESULT = new Obj(Obj.Con, "", Tab.nullType);    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Factor ::= BOOL 
            {
              Obj RESULT =null;
		 RESULT = new Obj(Obj.Con, "", s.boolType); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Factor ::= ASCII 
            {
              Obj RESULT =null;
		 RESULT = new Obj(Obj.Con, "", Tab.charType);    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Factor ::= NUMBER 
            {
              Obj RESULT =null;
		 RESULT = new Obj(Obj.Con, "", Tab.intType);     
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Factor ::= Designator LPAREN NT$16 ActPars NT$17 RPAREN 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
						// TODO proveriti da li je  currMethodActParams == currMethodFormParams
						
						if(Obj.Meth == func.getKind()){
							s.sintaxInfo("Pronadjen poziv funkcije: '"  + func.getName() + "' na liniji " + funcleft);
							RESULT = func;
						} else {
							s.sintaxError(funcleft, "Ime :" + func.getName() + " nije funkcija");
							RESULT = new Obj(Obj.Con, "", Tab.noType);
						}
						
						currMethodActParams = 0; // TODO pogledaj da li ovde moze ovo 
						
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$17 ::= 
            {
              Obj RESULT =(Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
 currMethodActParams++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$17",75, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$16 ::= 
            {
              Obj RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

					 	if(parser.isMain == true)
				 			parser.calledFuncMain++; 	
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$16",74, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Factor ::= Designator 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						RESULT = designator;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // MulopFactorList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopFactorList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // MulopFactorList ::= MulopFactorList Mulop Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopFactorList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Term ::= Factor NT$15 MulopFactorList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj factor = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$15 ::= 
            {
              Obj RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj factor = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 RESULT = factor; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$15",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // AddopTermList ::= 
            {
              Obj RESULT =null;
		 RESULT = new Obj(Obj.Con, "", Tab.intType); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermList",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // AddopTermList ::= AddopTermList Addop NT$14 Term 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = term; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermList",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$14 ::= 
            {
              Obj RESULT =null;
 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$14",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expr ::= ExprMinusTerm AddopTermList 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int addopTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addopTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj addopTerm = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						
						if(term == null){
							s.sintaxError(termleft, "Tip je null!" );
						}/*else{
							if(term.getType().equals(addopTerm.getType()) && term.getType().equals(Tab.intType) &&  addopTerm.getType().equals(Tab.intType)){
								RESULT = term; // term = term + addopTerm
								s.sintaxInfo("Operacija + uspesna! Linija: " + termleft );
							 }else if(false){
								s.sintaxError(termleft, "Tipovi su nekombatibilni pri operaciji + - += -= , moraju biti int!" );
								RESULT = new Obj(Obj.Con, "", Tab.noType);
							}
						}*/
						RESULT = term;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ExprMinusTerm ::= Term 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = term; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprMinusTerm",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExprMinusTerm ::= MINUS Term 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = term; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprMinusTerm",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ContFact ::= Expr 
            {
              Obj RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ContFact",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ContFact ::= Expr Relop Expr 
            {
              Obj RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj expr1 = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int relopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int relopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object relop = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj expr2 = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						Struct e1 = expr1.getType(),
						       e2 = expr2.getType();
						 
					    if(e1.getKind() == Struct.Array)
					        e1 = expr1.getType().getElemType();
					    if(e2.getKind() == Struct.Array)
					       e2 = expr2.getType().getElemType();
					        

						if(!e1.compatibleWith(e2)){
							s.semanticError(expr2left, "Levi tip izraza (" + s.getTypeName(e1.getKind()) + ") nije kopmatibilan sa desnim tipom izraza (" + s.getTypeName(e2.getKind()) +")"); 
					    	RESULT = null;
					    }
					    if((e1.getKind() == Obj.Var  || e2.getKind() == Obj.Var) && 
					       (e1.getKind() == Obj.Fld || e2.getKind() == Obj.Fld ||
					        expr1.getType().getKind() == Struct.Array || expr2.getType().getKind() == Struct.Array) && ((int)relop > 2)){
					    	s.semanticError(relopleft, "Uz promenljive tipa klase ili nizaa, od relacionih operatora, mogu se koristiti samo != ili ==");
					        RESULT = null;
					    }
					    RESULT = expr1;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ContFact",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CondFactList ::= ContFact 
            {
              Obj RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj cf = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = cf;  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CondFactList ::= CondFactList AND ContFact 
            {
              Obj RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj cf = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = cf;  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CondTerm ::= CondFactList 
            {
              Obj RESULT =null;
		int cflleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cflright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj cfl = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = cfl; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CondTermList ::= CondTerm 
            {
              Obj RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj ct = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = ct;  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CondTermList ::= CondTermList OR CondTerm 
            {
              Obj RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj ct = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = ct;  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Condition ::= CondTermList 
            {
              Obj RESULT =null;
		int ctlleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int ctlright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj ctl = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = ctl; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ActParsList ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ActParsList ::= ActParsList COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ActPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ActPars ::= ActParsList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DesignatorStatement ::= 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DesignatorStatement ::= Designator DEC 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DesignatorStatement ::= Designator INC 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					        // TODO
					      /*   if(
					         	((designator.getKind() == Obj.Var || designator.getKind() == Obj.Fld) && designator.getType().equals(Tab.intType)) || 
					         	(designator.getType().getKind() == Struct.Array && designator.getType().equals(Tab.intType))
					         	)
					         	
					         else
					        	s.semanticError(designatorleft, "Kod operacije inkremetiranja designator mora biti tipa int, a ne " + s.getTypeName(designator.getType().getKind()));
					    	*/
					    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DesignatorStatement ::= DesignatorLParen error RPAREN 
            {
              Obj RESULT =null;
			s.sintaxInfo("GRESKA (]): Lista parametra funkcije . ");	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DesignatorStatement ::= DesignatorLParen NT$13 ActPars RPAREN 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$13 ::= 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
				
					    	if(!(designator.getKind() == Obj.Meth))
					    	    s.semanticError(designatorleft, "Designator mora da bude staticka ili nestaticka metoda unutrasnje klase ili funciju");
					
							if(parser.isMain == true)
					 			parser.calledFuncMain++; 	
					 	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$13",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DesignatorStatement ::= Designator Assignop Expr 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						 
						if(!designator.getType().equals(expr.getType()))
							s.semanticError(designatorleft, "Leva (" + s.getTypeName(designator.getType().getKind())+ ") i desna (" + s.getTypeName(expr.getType().getKind()) + ") strana kod dodele vrednosti nisu istog tipa");
						
						if((designator.getType().getKind() == Struct.Array && designator.getType().getElemType().equals(expr.getType())) ||
							((designator.getKind() == Obj.Var || designator.getKind() == Obj.Fld))){
								RESULT = designator;
								s.sintaxInfo("Izvrena operacija =");
							}
							else{
							    
								s.semanticError(0,"Pri operaciji dodele vrednosti designator nije promeljiva,element niza ili polje klase");
								RESULT = new Obj(Obj.Con, "", Tab.noType);
							}
							
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DesignatorLParen ::= Designator LPAREN 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorLParen",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ElseStatement ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseStatement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ElseStatement ::= ELSE Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseStatement",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Statement ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
		 parser.blocks++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Statement ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI 
            {
              Object RESULT =null;
		
					 	 if(parser.isMain == true)
					 		parser.calledFuncMain++;
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Statement ::= PRINT LPAREN Expr NT$12 RPAREN SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 
					 	
					 	
					 	if(parser.isMain == true)
					 		parser.calledFuncMain++; 
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$12 ::= 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					      if(!(expr.getType().equals(Tab.intType) || expr.getType().equals(Tab.charType) || expr.getType().equals(s.boolType)))
					         s.semanticError(exprleft, "Expr u print naredbi mora biti tipa int, char ili bool");
					 
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$12",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Statement ::= READ LPAREN Designator NT$11 RPAREN SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$11 ::= 
            {
              Object RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					 
					 
					     // TODO Check za polje klase (ne radi)
					     if(!(designator.getKind() == Obj.Var || designator.getKind() == Obj.Fld || designator.getType().equals(Struct.Array)))
					         s.semanticError(designatorleft, "Designator mora biti promeljiva, polje klase ili element niza");
					     else {
					     	if(designator.getType().getKind() == Struct.Array && !(designator.getType().getElemType().equals(Tab.intType) || designator.getType().getElemType().equals(Tab.charType) || designator.getType().getElemType().equals(s.boolType)))
					             s.semanticError(designatorleft, "Designator (niz) mora biti int, char ili bool tipa");
					         else if(!(designator.getType().getKind() == Struct.Array) && (designator.getKind() == Obj.Var || designator.getKind() == Obj.Fld) && !(designator.getType().equals(Tab.intType) || designator.getType().equals(Tab.charType) || designator.getType().equals(s.boolType)))
					             s.semanticError(designatorleft, "Designtator mora biti int, char ili bool tipa");
					          
					        
					     }
					 
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Statement ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int exprObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj exprObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					      if(currentMethod == null)
					    	s.semanticError(exprObjleft, "Return ne sme postojati izvan tela metode (return type)");
					 	returnFound = true; /* add return type */ 
					 	parser.returnType = exprObj.getType();
					 	if(!parser.returnType.equals(currentMethod.getType()))
			            s.semanticError(exprObjleft, "Funckija ocekuje povratnu vrednost " + s.getTypeName(currentMethod.getType().getKind()) + " , a vracena vrednost je tipa " + s.getTypeName(parser.returnType.getKind()));
					 	//System.out.println(s.getTypeName(parser.returnType.getKind()));
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Statement ::= RETURN SEMI 
            {
              Object RESULT =null;
		int retSemileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int retSemiright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object retSemi = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					       if(currentMethod == null)
					    	s.semanticError(retSemileft, "Return ne sme postojati izvan tela metode");
						 returnFound = true; 
						 parser.returnType = Tab.noType; 
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Statement ::= CONTINIUE SEMI 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 if(parser.forLoop <= 0) s.sintaxError(cleft , "Continue ne moze biti van for petlje" ); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Statement ::= BREAK SEMI 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 if(parser.forLoop <= 0) s.sintaxError(bleft , "Break ne moze biti van for petlje" ); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Statement ::= ForStatement error RPAREN Statement 
            {
              Object RESULT =null;
		
					 	parser.forLoop--;
					 	System.out.println("Smanjena dubina fora " + parser.forLoop);
			    	 	s.sintaxInfo("GRESKA () ;): Dekleracija designator statement, najverovatnije u for . ");	
			    	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Statement ::= ForStatement DesignatorStatement SEMI Condition SEMI DesignatorStatement RPAREN Statement 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.forLoop--; s.semanticDebug(stmtleft,"Smanjena dubina for petlje, dubina = " + parser.forLoop); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Statement ::= IF LPAREN error RPAREN Statement ElseStatement 
            {
              Object RESULT =null;
		
			    	 	s.sintaxInfo("GRESKA ()): Dekleracija designator statement, najverovatnije u if uslovu. ");	
			    	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Statement ::= IF LPAREN Condition NT$10 RPAREN Statement ElseStatement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj cond = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$10 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj cond = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

	
					    /*if(cond.getType().getKind() != Struct.Bool)
					        s.semanticError(condleft, "Uslov u if naredbi treba da bude bool tipa");
					    prevCondFact = null;
					    prevCondTerm = null;*/

			    	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Statement ::= error SEMI 
            {
              Object RESULT =null;
		
					 		
					 		if(parser.actParsList == true) 
					 			s.sintaxInfo("GRESKA (;): Lista parametra funkcije. ");
					 		else
					 			s.sintaxInfo("GRESKA (;): Dekleracija designator statement, najverovatnije pri dodeli vrednosti. ");
					 		
					 		
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Statement ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ForStatement ::= FOR NT$9 LPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int forloopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int forloopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object forloop = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatement",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$9 ::= 
            {
              Object RESULT =null;
		int forloopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int forloopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object forloop = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parser.forLoop++; s.semanticDebug(forloopleft,"Uvecana dubina for petlje, dubina = " + parser.forLoop); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						Obj typeNode = Tab.find(typeName);
						if(typeNode == Tab.noObj){
							s.semanticError(typeNameleft, " Nije pronadjen tip : '" + typeName + "' u tabeli simbola ");
							RESULT = Tab.noType;
						}
						else {
							if(Obj.Type == typeNode.getKind()){
								RESULT = typeNode.getType();
							}
							else{
									s.semanticError(typeNameleft, " Ime: '" + typeName + "' ne predstavlja tip");
								RESULT = Tab.noType;
							}
						}
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ClassMethod ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethod",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ClassMethod ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethod",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ClassDecl ::= error LBRACE ClassBody RBRACE 
            {
              Object RESULT =null;
		
				    	
						parser.isClass = false;
						currentClass = Tab.noObj;
						s.sintaxInfo("GRESKA ({): Deklaracija prosirenja nadklase  (extends_).  ");
				    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ClassDecl ::= ClassDeclPreExt EXTENDS error LBRACE ClassBody RBRACE 
            {
              Object RESULT =null;
		
				    	
						parser.isClass = false;
						currentClass = Tab.noObj;
						s.sintaxInfo("GRESKA ({): Deklaracija prosirenja nadklase (extends).  ");
				    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ClassDecl ::= ClassDeclPreExt NT$8 LBRACE ClassBody RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
				
						Tab.chainLocalSymbols(currentClass.getType());
						Tab.closeScope();
						
						parser.isClass = false;
						currentClass = Tab.noObj;
						
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$8 ::= 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
	
					
						Obj temp = Tab.currentScope.findSymbol(className);
						currentClass = Tab.insert(Obj.Type, className, new Struct(Struct.Class)); 
						Tab.openScope();
					  	if(temp != null)
					  		s.sintaxError(classNameleft, "Ne moze da se ubaci klasa: '" + className + "' vec postoji u ovom scope" );
	
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ClassDecl ::= ClassDeclPreExt EXTENDS NT$6 Type NT$7 LBRACE ClassBody RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int extendClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int extendClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct extendClass = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
					
						Tab.chainLocalSymbols(currentClass.getType());
						Tab.closeScope();
						parser.isClass = false;
						currentClass = Tab.noObj;
						
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int extendClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int extendClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct extendClass = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

						Obj temp = Tab.currentScope.findSymbol(className);
						
					  	
	
						if(temp == null){
							if(extendClass.getKind() == Struct.Class){
								Struct s = new Struct(Struct.Class, extendClass);
								currentClass = Tab.insert(Obj.Type, className, s);
								Tab.openScope();
								Tab.insert(Obj.Fld, "$super" , extendClass);
							}else{
								s.sintaxError(extendClassleft, "Tip iz koje se izvodi klasa" + className +" nije klasnog tipa.");
								currentClass = Tab.noObj;
							}
						}else{	
							s.sintaxError(classNameleft, "Ne moze da se ubaci klasa: '" + className + "' vec postoji u ovom scope");
						}
						
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$6 ::= 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

					 parser.defInnerClass++;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ClassBody ::= VarDeclListE ClassMethod 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBody",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ClassDeclPreExt ::= CLASS NT$5 IDENT 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						RESULT = className;
						s.sintaxInfo("Obradjivanje nove klase '" + className + "' na liniji "  + classNameleft);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDeclPreExt",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$5 ::= 
            {
              String RESULT =null;
 parser.isClass = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FormalParamDecl ::= Type VarDef 
            {
              Object RESULT =null;
		int formalParamTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int formalParamTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct formalParamType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 s.formalParams(formalParamType); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FormalParamList ::= FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FormalParamList ::= error COMMA FormalParamDecl 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 s.methodError(fleft, ',', "Formalni parametar funkcije.");  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FormalParamList ::= FormalParamList COMMA FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FormPars ::= FormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodType ::= VOID 
            {
              Struct RESULT =null;
		 RESULT = Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodType",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodType ::= Type 
            {
              Struct RESULT =null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct returnType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = returnType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodType",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodStatic ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodStatic",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodStatic ::= STATIC 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 s.methodStaticClassCheck(stleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodStatic",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MethodDecl ::= MethodDeclPreVar VarDeclListE LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int methodEndleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodEndright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object methodEnd = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						s.methodReturn(methodEndleft);
						s.methodEnd();
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MethodDeclPreVar ::= MethodDeclPreFor error RPAREN 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
						methodErrorDetected = true;
						s.methodError(mleft, ')' , "Formalni parametar funkcije.");
					
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclPreVar",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MethodDeclPreVar ::= MethodDeclPreFor FormPars RPAREN 
            {
              Object RESULT =null;
		 currentMethod.setLevel(currMethodFormParams); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclPreVar",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodDeclPreFor ::= MethodStatic MethodType IDENT NT$4 LPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct returnType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 currMethodFormParams = 0; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclPreFor",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$4 ::= 
            {
              Object RESULT =null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct returnType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 					  
					 	s.insertMethodAndCount(methodNameleft, methodName, returnType);
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VarDef ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 	
			        	parser.isArray = false;
			        	s.variableCount();
						s.insertVariable(varNameleft, varName, false);				  
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDef",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VarDef ::= IDENT QLBRACE NT$3 QRBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 
						s.variableCount();
						parser.isArray = false;
						s.insertVariable(varNameleft, varName, true);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDef",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
 parser.isArray = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VarDecl ::= VarDef 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarDecl ::= error COMMA VarDef 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 s.variableError(vleft, ',', false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarDecl ::= VarDecl COMMA VarDef 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarDeclList ::= VarType error 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct v = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 s.variableError(vleft, '{', true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarDeclList ::= VarType error SEMI 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct v = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 s.variableError(vleft, ';', true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDeclList ::= VarType VarDecl SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarType ::= Type 
            {
              Struct RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.lastVarType = varType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarType",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDeclListE ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclListE",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDeclListE ::= VarDeclListE VarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclListE",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Value ::= ASCII 
            {
              Obj RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			        	Obj o = new Obj(Obj.Con, "CONSTANT", Tab.charType);
						o.setAdr(c.charAt(1));
						RESULT = o;
			        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Value ::= BOOL 
            {
              Obj RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			          
			        	Obj o = new Obj(Obj.Con, "CONSTANT", s.boolType);
						o.setAdr("true".equals(b) ?  1 : 0);
						RESULT = o;

			         
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Value ::= NUMBER 
            {
              Obj RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						Obj o = new Obj(Obj.Con, "CONSTANT", Tab.intType);
						o.setAdr(n);
						RESULT = o;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDef ::= IDENT EQUAL Value 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int constValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constValue = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						s.constantCount();
					    s.insertConstant(constNameleft, constName, constValue);						 
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDef",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDecl ::= ConstDef 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDecl ::= ConstDecl COMMA ConstDef 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDeclList ::= CONST Type NT$2 ConstDecl SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int constTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int constTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct constType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 parser.lastConstType = Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =null;
		int constTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct constType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

						s.checkContantType(constTypeleft);
						parser.lastConstType = constType;
						
						
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ProgramElem ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElem",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ProgramElem ::= VarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElem",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ProgramElem ::= ConstDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElem",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgramDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgramDeclList ::= ProgramDeclList ProgramElem 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgramName ::= IDENT 
            {
              Obj RESULT =null;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						RESULT = Tab.insert(Obj.Prog, programName, Tab.noType); // Dodaj objektni cvor u Tablu simbola za Program
						Tab.openScope();					                    // Otvori program scope  
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramName",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= PROGRAM NT$0 ProgramName ProgramDeclList LBRACE NT$1 MethodDeclList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int programObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int programObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj programObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		 
						s.checkMain();
						s.program_action(programObj);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int programObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int programObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj programObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
 parser.isGlobal = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.isGlobal = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

