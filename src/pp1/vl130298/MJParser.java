
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 30 16:58:15 CEST 2017
//----------------------------------------------------

package pp1.vl130298;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 30 16:58:15 CEST 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\231\000\002\073\002\000\002\074\002\000\002\002" +
    "\012\000\002\002\004\000\002\056\003\000\002\003\004" +
    "\000\002\003\002\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\075\002\000\002\010\007\000\002" +
    "\011\005\000\002\011\003\000\002\012\005\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\016\004" +
    "\000\002\016\002\000\002\061\003\000\002\013\005\000" +
    "\002\013\005\000\002\013\004\000\002\014\005\000\002" +
    "\014\005\000\002\014\003\000\002\076\002\000\002\015" +
    "\006\000\002\015\003\000\002\017\004\000\002\017\002" +
    "\000\002\077\002\000\002\023\007\000\002\022\005\000" +
    "\002\022\005\000\002\020\007\000\002\021\003\000\002" +
    "\021\002\000\002\062\003\000\002\062\003\000\002\024" +
    "\003\000\002\024\002\000\002\025\005\000\002\025\005" +
    "\000\002\025\003\000\002\026\004\000\002\100\002\000" +
    "\002\055\005\000\002\007\004\000\002\101\002\000\002" +
    "\102\002\000\002\005\012\000\002\103\002\000\002\005" +
    "\007\000\002\005\010\000\002\005\006\000\002\006\005" +
    "\000\002\006\002\000\002\060\003\000\002\030\004\000" +
    "\002\030\002\000\002\104\002\000\002\031\005\000\002" +
    "\027\004\000\002\027\004\000\002\027\010\000\002\027" +
    "\010\000\002\027\012\000\002\027\006\000\002\027\004" +
    "\000\002\027\004\000\002\027\004\000\002\027\005\000" +
    "\002\027\007\000\002\027\007\000\002\027\011\000\002" +
    "\027\005\000\002\033\004\000\002\033\002\000\002\072" +
    "\005\000\002\105\002\000\002\072\007\000\002\072\006" +
    "\000\002\072\004\000\002\072\004\000\002\072\002\000" +
    "\002\036\003\000\002\036\002\000\002\037\005\000\002" +
    "\037\003\000\002\032\003\000\002\040\005\000\002\040" +
    "\003\000\002\034\003\000\002\041\005\000\002\041\003" +
    "\000\002\035\005\000\002\035\003\000\002\070\004\000" +
    "\002\070\003\000\002\064\004\000\002\106\002\000\002" +
    "\071\006\000\002\071\002\000\002\107\002\000\002\066" +
    "\005\000\002\044\005\000\002\044\002\000\002\065\003" +
    "\000\002\110\002\000\002\111\002\000\002\065\010\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\065\004\000\002\065\007\000\002\065\007\000\002\065" +
    "\005\000\002\112\002\000\002\063\005\000\002\042\004" +
    "\000\002\042\002\000\002\113\002\000\002\043\005\000" +
    "\002\114\002\000\002\115\002\000\002\043\007\000\002" +
    "\067\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\047\003\000\002\047\003\000\002\050\003\000\002" +
    "\050\003\000\002\051\003\000\002\051\003\000\002\052" +
    "\003\000\002\052\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\004\004\005\001\002\000\004\002\376\001" +
    "\002\000\004\062\001\001\002\000\004\062\010\001\002" +
    "\000\014\003\ufffb\005\ufffb\011\ufffb\054\ufffb\062\ufffb\001" +
    "\002\000\014\003\ufffd\005\ufffd\011\ufffd\054\ufffd\062\ufffd" +
    "\001\002\000\014\003\023\005\024\011\025\054\014\062" +
    "\015\001\002\000\014\003\ufffa\005\ufffa\011\ufffa\054\ufffa" +
    "\062\ufffa\001\002\000\006\003\uffed\062\uffed\001\002\000" +
    "\012\007\000\010\000\055\000\062\000\001\002\000\066" +
    "\003\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\050" +
    "\uffc6\051\uffc6\053\uffc6\054\uffc6\056\uffc6\057\uffc6\062\uffc6" +
    "\001\002\000\014\003\ufff9\005\ufff9\011\ufff9\054\ufff9\062" +
    "\ufff9\001\002\000\014\003\ufffc\005\ufffc\011\ufffc\054\ufffc" +
    "\062\ufffc\001\002\000\006\006\354\054\uffcc\001\002\000" +
    "\006\003\343\062\076\001\002\000\014\003\ufff8\005\ufff8" +
    "\011\ufff8\054\ufff8\062\ufff8\001\002\000\004\054\045\001" +
    "\002\000\004\062\uffd2\001\002\000\004\062\015\001\002" +
    "\000\004\062\ufff7\001\002\000\004\062\031\001\002\000" +
    "\006\050\041\051\040\001\002\000\004\023\033\001\002" +
    "\000\006\050\ufff4\051\ufff4\001\002\000\010\061\036\063" +
    "\037\064\034\001\002\000\006\050\ufff0\051\ufff0\001\002" +
    "\000\006\050\ufff3\051\ufff3\001\002\000\006\050\ufff2\051" +
    "\ufff2\001\002\000\006\050\ufff1\051\ufff1\001\002\000\004" +
    "\062\031\001\002\000\014\003\ufff6\005\ufff6\011\ufff6\054" +
    "\ufff6\062\ufff6\001\002\000\006\050\ufff5\051\ufff5\001\002" +
    "\000\004\062\044\001\002\000\006\006\uffd1\054\uffd1\001" +
    "\002\000\010\054\uffee\055\uffee\062\uffee\001\002\000\004" +
    "\055\342\001\002\000\010\054\050\055\uffc7\062\015\001" +
    "\002\000\012\007\uffe2\010\uffe2\055\uffe2\062\uffe2\001\002" +
    "\000\010\054\uffef\055\uffef\062\uffef\001\002\000\004\055" +
    "\uffd0\001\002\000\012\007\054\010\uffdb\055\056\062\uffdb" +
    "\001\002\000\006\010\uffdc\062\uffdc\001\002\000\006\054" +
    "\uffee\062\uffee\001\002\000\004\055\uffc8\001\002\000\012" +
    "\007\uffe3\010\uffe3\055\uffe3\062\uffe3\001\002\000\006\010" +
    "\104\062\015\001\002\000\010\003\063\053\uffd7\062\015" +
    "\001\002\000\004\062\076\001\002\000\006\051\072\053" +
    "\073\001\002\000\006\051\070\053\uffd8\001\002\000\004" +
    "\053\067\001\002\000\006\051\uffd4\053\uffd4\001\002\000" +
    "\006\054\uffdf\062\uffdf\001\002\000\004\062\015\001\002" +
    "\000\006\051\uffd6\053\uffd6\001\002\000\004\062\015\001" +
    "\002\000\006\054\uffde\062\uffde\001\002\000\006\051\uffd5" +
    "\053\uffd5\001\002\000\006\051\uffd3\053\uffd3\001\002\000" +
    "\012\050\uffe4\051\uffe4\053\uffe4\056\077\001\002\000\004" +
    "\057\uffe6\001\002\000\004\057\101\001\002\000\010\050" +
    "\uffe5\051\uffe5\053\uffe5\001\002\000\004\062\105\001\002" +
    "\000\004\062\uffda\001\002\000\004\062\uffd9\001\002\000" +
    "\004\052\uffe1\001\002\000\004\052\107\001\002\000\010" +
    "\003\uffe0\053\uffe0\062\uffe0\001\002\000\006\054\111\062" +
    "\015\001\002\000\032\003\uffc4\012\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\017\uffc4\020\uffc4\022\uffc4\050\uffc4\054\uffc4\055" +
    "\uffc4\062\uffc4\001\002\000\032\003\125\012\116\013\132" +
    "\014\121\015\122\017\126\020\113\022\130\050\uffab\054" +
    "\114\055\131\062\115\001\002\000\004\052\336\001\002" +
    "\000\032\003\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\017" +
    "\uffc4\020\uffc4\022\uffc4\050\uffc4\054\uffc4\055\uffc4\062\uffc4" +
    "\001\002\000\072\023\uff80\024\uff80\025\uff80\026\uff80\027" +
    "\uff80\030\uff80\031\uff80\032\uff80\033\uff80\034\uff80\035\uff80" +
    "\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043\uff80\044" +
    "\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051\uff80\052\uff80" +
    "\053\uff80\056\uff80\057\uff80\060\uff80\001\002\000\004\052" +
    "\uffc3\001\002\000\024\023\320\041\207\042\210\043\164" +
    "\044\155\045\157\046\321\047\322\052\323\001\002\000" +
    "\010\003\303\050\uffab\062\115\001\002\000\004\050\302" +
    "\001\002\000\004\052\246\001\002\000\004\050\245\001" +
    "\002\000\032\003\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5" +
    "\017\uffc5\020\uffc5\022\uffc5\050\uffc5\054\uffc5\055\uffc5\062" +
    "\uffc5\001\002\000\004\050\244\001\002\000\004\052\234" +
    "\001\002\000\072\023\uff89\024\uff89\025\uff89\026\uff89\027" +
    "\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89" +
    "\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044" +
    "\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89" +
    "\053\uff89\056\uff89\057\uff89\060\uff89\001\002\000\022\021" +
    "\140\025\134\050\143\052\147\061\142\062\115\063\136" +
    "\064\146\001\002\000\012\007\uffdd\010\uffdd\055\uffdd\062" +
    "\uffdd\001\002\000\004\050\133\001\002\000\034\003\uffbb" +
    "\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\022\uffbb\050\uffbb\054\uffbb\055\uffbb\062\uffbb\001\002" +
    "\000\016\021\140\052\147\061\142\062\115\063\136\064" +
    "\146\001\002\000\042\024\uff99\025\uff99\031\uff99\032\uff99" +
    "\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041" +
    "\uff99\042\uff99\050\uff99\051\uff99\053\uff99\057\uff99\001\002" +
    "\000\056\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031" +
    "\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e" +
    "\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\050" +
    "\uff8e\051\uff8e\053\uff8e\057\uff8e\001\002\000\004\050\205" +
    "\001\002\000\004\062\015\001\002\000\060\024\uff94\025" +
    "\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94" +
    "\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042" +
    "\uff94\043\uff94\044\uff94\045\uff94\050\uff94\051\uff94\052\166" +
    "\053\uff94\057\uff94\001\002\000\056\024\uff90\025\uff90\026" +
    "\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90" +
    "\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043" +
    "\uff90\044\uff90\045\uff90\050\uff90\051\uff90\053\uff90\057\uff90" +
    "\001\002\000\034\003\uffb9\012\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\022\uffb9\050\uffb9\054\uffb9" +
    "\055\uffb9\062\uffb9\001\002\000\042\024\uff9d\025\uff9d\031" +
    "\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d" +
    "\040\uff9d\041\uff9d\042\uff9d\050\uff9d\051\uff9d\053\uff9d\057" +
    "\uff9d\001\002\000\056\024\uff98\025\uff98\026\uff98\027\uff98" +
    "\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036" +
    "\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98" +
    "\045\uff98\050\uff98\051\uff98\053\uff98\057\uff98\001\002\000" +
    "\056\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f" +
    "\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040" +
    "\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\050\uff8f" +
    "\051\uff8f\053\uff8f\057\uff8f\001\002\000\020\021\140\025" +
    "\134\052\147\061\142\062\115\063\136\064\146\001\002" +
    "\000\004\053\151\001\002\000\056\024\uff8a\025\uff8a\026" +
    "\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a" +
    "\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043" +
    "\uff8a\044\uff8a\045\uff8a\050\uff8a\051\uff8a\053\uff8a\057\uff8a" +
    "\001\002\000\056\024\uff95\025\uff95\026\uff95\027\uff95\030" +
    "\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95" +
    "\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045" +
    "\uff95\050\uff95\051\uff95\053\uff95\057\uff95\001\002\000\056" +
    "\024\uff97\025\uff97\026\162\027\160\030\156\031\uff97\032" +
    "\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97" +
    "\041\uff97\042\uff97\043\164\044\155\045\157\050\uff97\051" +
    "\uff97\053\uff97\057\uff97\001\002\000\016\021\uff6f\052\uff6f" +
    "\061\uff6f\062\uff6f\063\uff6f\064\uff6f\001\002\000\020\021" +
    "\uff6a\025\uff6a\052\uff6a\061\uff6a\062\uff6a\063\uff6a\064\uff6a" +
    "\001\002\000\016\021\uff6c\052\uff6c\061\uff6c\062\uff6c\063" +
    "\uff6c\064\uff6c\001\002\000\020\021\uff69\025\uff69\052\uff69" +
    "\061\uff69\062\uff69\063\uff69\064\uff69\001\002\000\016\021" +
    "\uff6d\052\uff6d\061\uff6d\062\uff6d\063\uff6d\064\uff6d\001\002" +
    "\000\016\021\140\052\147\061\142\062\115\063\136\064" +
    "\146\001\002\000\016\021\uff6e\052\uff6e\061\uff6e\062\uff6e" +
    "\063\uff6e\064\uff6e\001\002\000\016\021\uff70\052\uff70\061" +
    "\uff70\062\uff70\063\uff70\064\uff70\001\002\000\020\021\uff6b" +
    "\025\uff6b\052\uff6b\061\uff6b\062\uff6b\063\uff6b\064\uff6b\001" +
    "\002\000\056\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96" +
    "\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037" +
    "\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96" +
    "\050\uff96\051\uff96\053\uff96\057\uff96\001\002\000\022\021" +
    "\uff93\025\uff93\052\uff93\053\uff93\061\uff93\062\uff93\063\uff93" +
    "\064\uff93\001\002\000\022\021\140\025\134\052\147\053" +
    "\uffa9\061\142\062\115\063\136\064\146\001\002\000\006" +
    "\051\175\053\uffaa\001\002\000\006\051\uffa7\053\uffa7\001" +
    "\002\000\004\053\uff92\001\002\000\004\053\174\001\002" +
    "\000\056\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031" +
    "\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91" +
    "\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\050" +
    "\uff91\051\uff91\053\uff91\057\uff91\001\002\000\020\021\140" +
    "\025\134\052\147\061\142\062\115\063\136\064\146\001" +
    "\002\000\006\051\uffa8\053\uffa8\001\002\000\060\024\uff8d" +
    "\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033" +
    "\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d" +
    "\042\uff8d\043\uff8d\044\uff8d\045\uff8d\050\uff8d\051\uff8d\053" +
    "\uff8d\056\200\057\uff8d\001\002\000\022\003\202\021\140" +
    "\025\134\052\147\061\142\062\115\063\136\064\146\001" +
    "\002\000\004\057\204\001\002\000\004\057\203\001\002" +
    "\000\056\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031" +
    "\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b" +
    "\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\050" +
    "\uff8b\051\uff8b\053\uff8b\057\uff8b\001\002\000\056\024\uff8c" +
    "\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033" +
    "\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c" +
    "\042\uff8c\043\uff8c\044\uff8c\045\uff8c\050\uff8c\051\uff8c\053" +
    "\uff8c\057\uff8c\001\002\000\034\003\uffb8\012\uffb8\013\uffb8" +
    "\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\022\uffb8\050" +
    "\uffb8\054\uffb8\055\uffb8\062\uffb8\001\002\000\042\024\211" +
    "\025\212\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\040\uff9c\041\207\042\210\050\uff9c\051\uff9c" +
    "\053\uff9c\057\uff9c\001\002\000\020\021\uff72\025\uff72\052" +
    "\uff72\061\uff72\062\uff72\063\uff72\064\uff72\001\002\000\020" +
    "\021\uff71\025\uff71\052\uff71\061\uff71\062\uff71\063\uff71\064" +
    "\uff71\001\002\000\016\021\uff74\052\uff74\061\uff74\062\uff74" +
    "\063\uff74\064\uff74\001\002\000\016\021\uff73\052\uff73\061" +
    "\uff73\062\uff73\063\uff73\064\uff73\001\002\000\016\021\uff75" +
    "\052\uff75\061\uff75\062\uff75\063\uff75\064\uff75\001\002\000" +
    "\016\021\uff9b\052\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b" +
    "\001\002\000\016\021\uff76\052\uff76\061\uff76\062\uff76\063" +
    "\uff76\064\uff76\001\002\000\016\021\140\052\147\061\142" +
    "\062\115\063\136\064\146\001\002\000\042\024\uff9a\025" +
    "\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\040\uff9a\041\uff9a\042\uff9a\050\uff9a\051\uff9a\053" +
    "\uff9a\057\uff9a\001\002\000\042\024\uff9e\025\uff9e\031\uff9e" +
    "\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040" +
    "\uff9e\041\uff9e\042\uff9e\050\uff9e\051\uff9e\053\uff9e\057\uff9e" +
    "\001\002\000\072\023\uff86\024\uff86\025\uff86\026\uff86\027" +
    "\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86\035\uff86" +
    "\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044" +
    "\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86" +
    "\053\uff86\056\uff86\057\uff86\060\uff86\001\002\000\072\023" +
    "\uff88\024\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88" +
    "\032\uff88\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040" +
    "\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\046\uff88" +
    "\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\056\224\057" +
    "\uff88\060\225\001\002\000\072\023\uff87\024\uff87\025\uff87" +
    "\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034" +
    "\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87" +
    "\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051" +
    "\uff87\052\uff87\053\uff87\056\uff87\057\uff87\060\uff87\001\002" +
    "\000\020\021\uff83\025\uff83\052\uff83\061\uff83\062\uff83\063" +
    "\uff83\064\uff83\001\002\000\004\062\uff85\001\002\000\004" +
    "\062\115\001\002\000\072\023\uff84\024\uff84\025\uff84\026" +
    "\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84" +
    "\035\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043" +
    "\uff84\044\uff84\045\uff84\046\uff84\047\uff84\050\uff84\051\uff84" +
    "\052\uff84\053\uff84\056\uff84\057\uff84\060\uff84\001\002\000" +
    "\020\021\140\025\134\052\147\061\142\062\115\063\136" +
    "\064\146\001\002\000\004\057\uff82\001\002\000\004\057" +
    "\233\001\002\000\072\023\uff81\024\uff81\025\uff81\026\uff81" +
    "\027\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035" +
    "\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81" +
    "\044\uff81\045\uff81\046\uff81\047\uff81\050\uff81\051\uff81\052" +
    "\uff81\053\uff81\056\uff81\057\uff81\060\uff81\001\002\000\020" +
    "\021\140\025\134\052\147\061\142\062\115\063\136\064" +
    "\146\001\002\000\006\051\236\053\237\001\002\000\004" +
    "\061\241\001\002\000\004\050\240\001\002\000\034\003" +
    "\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\022\uffb6\050\uffb6\054\uffb6\055\uffb6\062\uffb6\001" +
    "\002\000\004\053\242\001\002\000\004\050\243\001\002" +
    "\000\034\003\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016" +
    "\uffb5\017\uffb5\020\uffb5\022\uffb5\050\uffb5\054\uffb5\055\uffb5" +
    "\062\uffb5\001\002\000\034\003\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\022\uffc0\050\uffc0" +
    "\054\uffc0\055\uffc0\062\uffc0\001\002\000\034\003\uffc1\012" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1" +
    "\022\uffc1\050\uffc1\054\uffc1\055\uffc1\062\uffc1\001\002\000" +
    "\022\003\253\021\140\025\134\052\147\061\142\062\115" +
    "\063\136\064\146\001\002\000\012\037\uffa1\040\uffa1\050" +
    "\uffa1\053\uffa1\001\002\000\010\040\300\050\uffa6\053\uffa6" +
    "\001\002\000\026\031\275\032\272\033\273\034\271\035" +
    "\276\036\270\037\uff9f\040\uff9f\050\uff9f\053\uff9f\001\002" +
    "\000\012\037\266\040\uffa3\050\uffa3\053\uffa3\001\002\000" +
    "\004\053\263\001\002\000\010\040\uffa4\050\uffa4\053\uffa4" +
    "\001\002\000\004\053\256\001\002\000\030\003\125\012" +
    "\116\013\132\014\121\015\122\017\126\020\113\022\130" +
    "\050\uffab\054\114\062\115\001\002\000\034\003\uffb2\012" +
    "\uffb2\013\uffb2\014\uffb2\015\uffb2\016\260\017\uffb2\020\uffb2" +
    "\022\uffb2\050\uffb2\054\uffb2\055\uffb2\062\uffb2\001\002\000" +
    "\030\003\125\012\116\013\132\014\121\015\122\017\126" +
    "\020\113\022\130\050\uffab\054\114\062\115\001\002\000" +
    "\034\003\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\022\uffbf\050\uffbf\054\uffbf\055\uffbf\062" +
    "\uffbf\001\002\000\034\003\uffb3\012\uffb3\013\uffb3\014\uffb3" +
    "\015\uffb3\016\uffb3\017\uffb3\020\uffb3\022\uffb3\050\uffb3\054" +
    "\uffb3\055\uffb3\062\uffb3\001\002\000\030\003\125\012\116" +
    "\013\132\014\121\015\122\017\126\020\113\022\130\050" +
    "\uffab\054\114\062\115\001\002\000\034\003\uffb2\012\uffb2" +
    "\013\uffb2\014\uffb2\015\uffb2\016\260\017\uffb2\020\uffb2\022" +
    "\uffb2\050\uffb2\054\uffb2\055\uffb2\062\uffb2\001\002\000\034" +
    "\003\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\022\uffbe\050\uffbe\054\uffbe\055\uffbe\062\uffbe" +
    "\001\002\000\020\021\140\025\134\052\147\061\142\062" +
    "\115\063\136\064\146\001\002\000\012\037\uffa2\040\uffa2" +
    "\050\uffa2\053\uffa2\001\002\000\020\021\uff77\025\uff77\052" +
    "\uff77\061\uff77\062\uff77\063\uff77\064\uff77\001\002\000\020" +
    "\021\uff79\025\uff79\052\uff79\061\uff79\062\uff79\063\uff79\064" +
    "\uff79\001\002\000\020\021\uff7b\025\uff7b\052\uff7b\061\uff7b" +
    "\062\uff7b\063\uff7b\064\uff7b\001\002\000\020\021\uff7a\025" +
    "\uff7a\052\uff7a\061\uff7a\062\uff7a\063\uff7a\064\uff7a\001\002" +
    "\000\020\021\140\025\134\052\147\061\142\062\115\063" +
    "\136\064\146\001\002\000\020\021\uff7c\025\uff7c\052\uff7c" +
    "\061\uff7c\062\uff7c\063\uff7c\064\uff7c\001\002\000\020\021" +
    "\uff78\025\uff78\052\uff78\061\uff78\062\uff78\063\uff78\064\uff78" +
    "\001\002\000\012\037\uffa0\040\uffa0\050\uffa0\053\uffa0\001" +
    "\002\000\020\021\140\025\134\052\147\061\142\062\115" +
    "\063\136\064\146\001\002\000\010\040\uffa5\050\uffa5\053" +
    "\uffa5\001\002\000\034\003\uffba\012\uffba\013\uffba\014\uffba" +
    "\015\uffba\016\uffba\017\uffba\020\uffba\022\uffba\050\uffba\054" +
    "\uffba\055\uffba\062\uffba\001\002\000\004\053\313\001\002" +
    "\000\004\050\305\001\002\000\020\021\140\025\134\052" +
    "\147\061\142\062\115\063\136\064\146\001\002\000\004" +
    "\050\307\001\002\000\006\053\uffab\062\115\001\002\000" +
    "\004\053\311\001\002\000\030\003\125\012\116\013\132" +
    "\014\121\015\122\017\126\020\113\022\130\050\uffab\054" +
    "\114\062\115\001\002\000\034\003\uffbd\012\uffbd\013\uffbd" +
    "\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\022\uffbd\050" +
    "\uffbd\054\uffbd\055\uffbd\062\uffbd\001\002\000\030\003\125" +
    "\012\116\013\132\014\121\015\122\017\126\020\113\022" +
    "\130\050\uffab\054\114\062\115\001\002\000\034\003\uffbc" +
    "\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\022\uffbc\050\uffbc\054\uffbc\055\uffbc\062\uffbc\001\002" +
    "\000\020\021\uff7d\025\uff7d\052\uff7d\061\uff7d\062\uff7d\063" +
    "\uff7d\064\uff7d\001\002\000\020\021\uff7e\025\uff7e\052\uff7e" +
    "\061\uff7e\062\uff7e\063\uff7e\064\uff7e\001\002\000\020\021" +
    "\140\025\134\052\147\061\142\062\115\063\136\064\146" +
    "\001\002\000\020\021\uff7f\025\uff7f\052\uff7f\061\uff7f\062" +
    "\uff7f\063\uff7f\064\uff7f\001\002\000\006\050\uffad\053\uffad" +
    "\001\002\000\006\050\uffac\053\uffac\001\002\000\024\003" +
    "\325\021\uffb0\025\uffb0\052\uffb0\053\uffb0\061\uffb0\062\uffb0" +
    "\063\uffb0\064\uffb0\001\002\000\022\021\140\025\134\052" +
    "\147\053\uffa9\061\142\062\115\063\136\064\146\001\002" +
    "\000\004\053\326\001\002\000\006\050\uffae\053\uffae\001" +
    "\002\000\004\053\330\001\002\000\006\050\uffaf\053\uffaf" +
    "\001\002\000\006\050\uffb1\053\uffb1\001\002\000\004\052" +
    "\333\001\002\000\010\003\uffc2\050\uffc2\062\uffc2\001\002" +
    "\000\032\003\125\012\116\013\132\014\121\015\122\017" +
    "\126\020\113\022\130\050\uffab\054\114\055\335\062\115" +
    "\001\002\000\034\003\uffb4\012\uffb4\013\uffb4\014\uffb4\015" +
    "\uffb4\016\uffb4\017\uffb4\020\uffb4\022\uffb4\050\uffb4\054\uffb4" +
    "\055\uffb4\062\uffb4\001\002\000\004\062\115\001\002\000" +
    "\004\053\340\001\002\000\004\050\341\001\002\000\034" +
    "\003\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\020\uffb7\022\uffb7\050\uffb7\054\uffb7\055\uffb7\062\uffb7" +
    "\001\002\000\014\003\uffc9\005\uffc9\011\uffc9\054\uffc9\062" +
    "\uffc9\001\002\000\022\003\uffea\005\uffea\011\uffea\050\352" +
    "\051\351\054\uffea\055\uffea\062\uffea\001\002\000\006\050" +
    "\347\051\346\001\002\000\006\050\uffe7\051\uffe7\001\002" +
    "\000\004\062\076\001\002\000\016\003\uffec\005\uffec\011" +
    "\uffec\054\uffec\055\uffec\062\uffec\001\002\000\006\050\uffe9" +
    "\051\uffe9\001\002\000\004\062\076\001\002\000\016\003" +
    "\uffeb\005\uffeb\011\uffeb\054\uffeb\055\uffeb\062\uffeb\001\002" +
    "\000\006\050\uffe8\051\uffe8\001\002\000\006\003\361\062" +
    "\uffcf\001\002\000\004\054\356\001\002\000\010\054\uffee" +
    "\055\uffee\062\uffee\001\002\000\004\055\360\001\002\000" +
    "\014\003\uffcb\005\uffcb\011\uffcb\054\uffcb\062\uffcb\001\002" +
    "\000\004\054\370\001\002\000\004\062\015\001\002\000" +
    "\004\054\uffce\001\002\000\004\054\365\001\002\000\010" +
    "\054\uffee\055\uffee\062\uffee\001\002\000\004\055\367\001" +
    "\002\000\014\003\uffcd\005\uffcd\011\uffcd\054\uffcd\062\uffcd" +
    "\001\002\000\010\054\uffee\055\uffee\062\uffee\001\002\000" +
    "\004\055\372\001\002\000\014\003\uffca\005\uffca\011\uffca" +
    "\054\uffca\062\uffca\001\002\000\012\007\uffe2\010\uffe2\055" +
    "\uffe2\062\uffe2\001\002\000\012\007\054\010\uffdb\055\375" +
    "\062\uffdb\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\073\005\001\001\000\004\056\006\001\001\000\004" +
    "\003\010\001\001\000\002\001\001\000\020\004\016\005" +
    "\021\010\011\013\015\055\017\060\012\061\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\074\372\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\103\354\001\001\000\006\014\343\015\344\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\100\042" +
    "\001\001\000\004\060\025\001\001\000\004\075\026\001" +
    "\001\000\006\011\027\012\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\045\016\046\001\001\000\002\001\001\000" +
    "\012\006\051\013\050\060\012\061\020\001\001\000\004" +
    "\017\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\020\056\021\057\022\054\023\060\001\001\000\002" +
    "\001\001\000\004\016\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\060\102\062\101\001\001\000\012" +
    "\024\064\025\063\026\065\060\061\001\001\000\004\015" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\070\060\061\001\001\000\002\001\001\000\006\026\073" +
    "\060\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\076\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\050\060" +
    "\012\061\020\001\001\000\004\030\111\001\001\000\014" +
    "\027\123\031\117\063\116\067\126\072\122\001\001\000" +
    "\002\001\001\000\004\030\333\001\001\000\002\001\001" +
    "\000\004\104\331\001\001\000\010\045\316\051\315\054" +
    "\314\001\001\000\010\063\116\067\126\072\303\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\112\220\001\001\000\016\063\140\064\136\065\144\066" +
    "\143\067\126\070\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\063\140\065\144\066" +
    "\217\067\126\001\001\000\004\071\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\107\151\001\001\000\002\001\001\000" +
    "\016\063\140\064\147\065\144\066\143\067\126\070\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\152\001\001\000\010\052\160\053\162\054\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\063\140\065\164" +
    "\067\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\110\166\001\001" +
    "\000\022\036\171\037\167\063\140\064\170\065\144\066" +
    "\143\067\126\070\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\111\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\063\140\064\175\065\144\066\143" +
    "\067\126\070\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\063\140\064\200\065\144\066\143\067\126" +
    "\070\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\047\213\050\214\051\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\106\215\001\001\000\002\001\001\000" +
    "\012\063\140\065\144\066\216\067\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\221\001\001\000" +
    "\004\043\222\001\001\000\002\001\001\000\004\114\227" +
    "\001\001\000\004\113\225\001\001\000\004\067\226\001" +
    "\001\000\002\001\001\000\016\063\140\064\230\065\144" +
    "\066\143\067\126\070\134\001\001\000\004\115\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\063\140" +
    "\064\234\065\144\066\143\067\126\070\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\032\254" +
    "\034\253\035\246\040\247\041\251\063\140\064\250\065" +
    "\144\066\143\067\126\070\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\027\256\031\117\063\116\067\126\072\122\001" +
    "\001\000\004\033\260\001\001\000\014\027\261\031\117" +
    "\063\116\067\126\072\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\027\263\031\117\063\116\067\126" +
    "\072\122\001\001\000\004\033\264\001\001\000\002\001" +
    "\001\000\020\035\266\063\140\064\250\065\144\066\143" +
    "\067\126\070\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\063\140\064\276\065\144\066\143\067\126\070" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\034\300\035\246\041\251\063\140\064" +
    "\250\065\144\066\143\067\126\070\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\032\305\034\253\035\246\040\247\041\251" +
    "\063\140\064\250\065\144\066\143\067\126\070\134\001" +
    "\001\000\002\001\001\000\010\063\116\067\126\072\307" +
    "\001\001\000\002\001\001\000\014\027\311\031\117\063" +
    "\116\067\126\072\122\001\001\000\002\001\001\000\014" +
    "\027\313\031\117\063\116\067\126\072\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\063\140\064\330\065\144\066\143\067\126\070\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\105\323\001\001\000\022\036\326\037\167\063" +
    "\140\064\170\065\144\066\143\067\126\070\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\027\123\031\117\063\116\067\126\072" +
    "\122\001\001\000\002\001\001\000\006\063\336\067\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\347\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\352\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\101\361\001\001\000" +
    "\002\001\001\000\006\007\356\016\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\362\001\001\000\004\102\363\001\001\000\002\001\001" +
    "\000\006\007\365\016\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\370\016\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\373\001\001\000" +
    "\012\020\056\021\057\022\054\023\060\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 3;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

		     Singleton s = Singleton.getInstance();
		     s.initSymbolTable();
		  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

			  Singleton s = Singleton.getInstance();
		      Symbol symbol = this.getScanner().next_token();
			      if (symbol != null && symbol.value != null) 
				      s.log.info(symbol.toString() + " " + symbol.value.toString());
			  return symbol;
		  
    }

//vidljivo za parser

				public void report_fatal_error(String message, Object info) throws java.lang.Exception {
     			    done_parsing();
      			    report_error(message, info);
    			}
  
			    public void syntax_error(Symbol cur_token) {
			        report_error("Sintaksna greska na liniji " + cur_token.left  , cur_token);
			    }
			  
			    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
			        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
			    }
			    
			    
			     public void report_error(String message, Object info) {
			    	errorDectected = true;
			    	s.log.error(message);
			    }
			    
			    public void report_info(String message, Object info) {
			        s.log.info("WTF info (search in cup)");	
			    }
    
				Singleton s = Singleton.getInstance();
			    public static final Struct boolType = new Struct(Struct.Bool); // Struct for Bool type !
				public static final Obj    boolObj  = new Obj(Obj.Type, "bool" , boolType); // Obj za boolType
				public static final int constLevel  = 0;

				Struct lastConstType = Tab.noType;
				Struct lastVarType = Tab.noType;
				Obj lastDesignator = null;

				int globalVariables     = 0; // definicija globalnih promenljivih  -> ako se nalazi u globalnom opsegu definicije promenljivih
				int localMainVariables  = 0; // definicija lokalnih promeljivih (u main funkciji)
				int globalConstants     = 0; // definicije globalnih konstanti
				int globalArrays	    = 0; // deleracije globalnih nizova
	

				int glAndStMethInClass  = 0; // definicija globalniih i statickih funkicja unutrasnjih klasa
				int blocks              = 0; // blokovi naredbi
				int calledFuncMain      = 0; // poziv funkicje u telu metode main
				int fomalArgMeth        = 0; // delaracija formalnih argumenata funkcije 
		
				int defInnerClass 		= 0; // definicjije unutrasnjih klasa
				int defInnerClassMeth   = 0; // defiicije metoda unutrasnjih klasa
				int dekFieldsInnerClass = 0; // deklaracija polja unutrasnjih klasa
	
				boolean isArray      = false,      // niz      ili skalar
						isGlobal     = false,      // globalno ili lokalno 
						isClass      = false,      // klasa    ili nesto drugo
						isMain       = false,      // main fja ili nesto drugo
						isStatic     = false,      // staticna ili nesto drugo
						isFunct      = false,	   //  func    ili nesto drugo
						isDot		 = false,      //  . se pojavila
						isArrayElem  = false;      // [expr!] element niza 
			
			
				boolean isAssign     = false;      // da li se radi dodela vrednosti
				boolean actParsList  = false;
				int forLoop      = 0;              // da li je for petlja? // ako je nula nije for petlja ako je veci broj to znaci da je for ili ugnezdeni for
	
				
	
				boolean errorDectected = false;
				
				Struct returnType = null;
			 
			 
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {

 
				Singleton s = Singleton.getInstance();
				Obj currentMethod        = null;    // ima informaciju o funkciji koja se trenutno obradjuje
				int currMethodFormParams = 0;       // broj formalnih parametra funckije
				int currMethodActParams  = 0;       // broj stvarnih parametra funckije

				boolean methodErrorDetected = false; // da li se desila greska kod parsiranja metoode
				Obj currentClass    = null;    // ima informaciju o klasi koja se trenutno obradjuje
				boolean returnFound = false; // koristi se kada fja treba da vrati vredonost !
			
	
				boolean haveMain = false; // da li imamo main fju u programu
	
	 
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // MulopRight ::= MOEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // MulopRight ::= DEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // MulopRight ::= MUEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // MulopLeft ::= MOD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // MulopLeft ::= DIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // MulopLeft ::= MUL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Mulop ::= MulopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Mulop ::= MulopLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // AddopRight ::= MEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // AddopRight ::= PEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // AddopLeft ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // AddopLeft ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Addop ::= AddopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Addop ::= AddopLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Relop ::= GEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Relop ::= GTR 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Relop ::= LEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Relop ::= LSS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Relop ::= NEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Relop ::= EQU 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Assignop ::= MulopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Assignop ::= AddopRight 
            {
              Object RESULT =null;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Assignop ::= EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DesignatorIdent ::= IDENT 
            {
              Obj RESULT =null;
		int symbolNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int symbolNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String symbolName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					 	Obj symbol = Tab.find(symbolName);
					 	StringBuilder msg = new StringBuilder("Koriscenje ");
					 	if(symbol != Tab.noObj){
					 	     
					 	     switch(symbol.getKind()){
					 	        case Obj.Con:  msg.append("konstante '");     break;
					 	        case Obj.Var:
					 	            msg.append((symbol.getLevel() == 0) ? "(globalna) ":"(lokalna) " );
					 	            if(symbol.getType().getKind() == Struct.Array) 
					 	            	msg.append("niza '");
					 	        	else
					 	        	msg.append("promenljive '");
					 	        	break;
					 	        case Obj.Type: msg.append("tipa!!! '");       break;
					 	        case Obj.Meth: msg.append("metode '");        break;
					 	        case Obj.Fld:  msg.append("polja klasa '");   break;
					 	        case Obj.Elem: msg.append("elementa niza '"); break;
					 	        case Obj.Prog: msg.append("programa!!! '");   break;
					 	    }
					 	    msg.append(symbolName);
					 	    msg.append("' na liniji: ");
					 	    msg.append(symbolNameleft);
					 	    s.sintaxInfo(msg.toString());
					 	}
					 	else
					 		s.sintaxError(symbolNameleft, "Simbol '" + symbolName + "' ne postoji u tabeli simbola!");
					 	RESULT = symbol;
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorIdent",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DesignatorElem ::= QLBRACE NT$17 Expr NT$18 QRBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.isArrayElem = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorElem",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 RESULT = expr; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$18",75, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$17 ::= 
            {
              Object RESULT =null;
 parser.isArrayElem = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$17",74, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DesignatorElem ::= DOT NT$16 DesignatorIdent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int designatorIdenleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorIdenright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designatorIden = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
					/*	if(parser.lastDesignator.getType().getKind() == Struct.Class){
							System.out.println("radi!");
							RESULT = designatorIden;
						} else {
							s.sintaxError(designatorIdenleft, "Posle . designator mora da bude klasnog tipa ");
							RESULT = new Obj(Obj.Con, "", Tab.noType);
						}
						parser.lastDesignator = designatorIden;
					*/
						RESULT = designatorIden;
						parser.isDot = false; 
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorElem",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$16 ::= 
            {
              Object RESULT =null;
 parser.isDot = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$16",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DesignatorList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorList",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DesignatorList ::= DesignatorList DesignatorElem 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorList",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Designator ::= DesignatorIdent NT$15 DesignatorList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$15 ::= 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
						parser.lastDesignator = designator;
						RESULT = designator; 
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$15",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Factor ::= LPAREN Expr RPAREN 
            {
              Obj RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
						// Expr treba da bude tipa Obj
						RESULT = expr; 
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Factor ::= NEW Type QLBRACE error QRBRACE 
            {
              Obj RESULT =null;
		
						s.sintaxInfo("GRESKA (]): Izraz za indeksiranje. ");	
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Factor ::= NEW Type QLBRACE Expr QRBRACE 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Factor ::= NEW Type 
            {
              Obj RESULT =null;
		 RESULT = new Obj(Obj.Con, "", Tab.nullType);    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Factor ::= BOOL 
            {
              Obj RESULT =null;
		 RESULT = new Obj(Obj.Con, "", parser.boolType); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Factor ::= ASCII 
            {
              Obj RESULT =null;
		 RESULT = new Obj(Obj.Con, "", Tab.charType);    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Factor ::= NUMBER 
            {
              Obj RESULT =null;
		 RESULT = new Obj(Obj.Con, "", Tab.intType);     
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Factor ::= Designator LPAREN NT$13 ActPars NT$14 RPAREN 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
						// TODO proveriti da li je  currMethodActParams == currMethodFormParams
						
						if(Obj.Meth == func.getKind()){
							s.sintaxInfo("Pronadjen poziv funkcije: '"  + func.getName() + "' na liniji " + funcleft);
							RESULT = func;
						} else {
							s.sintaxError(funcleft, "Ime :" + func.getName() + " nije funkcija");
							RESULT = new Obj(Obj.Con, "", Tab.noType);
						}
						
						currMethodActParams = 0; // TODO pogledaj da li ovde moze ovo 
						
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$14 ::= 
            {
              Obj RESULT =(Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
 currMethodActParams++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$14",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$13 ::= 
            {
              Obj RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

					 	if(parser.isMain == true)
				 			parser.calledFuncMain++; 	
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$13",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Factor ::= Designator 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						RESULT = designator;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // MulopFactorList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopFactorList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // MulopFactorList ::= MulopFactorList Mulop Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopFactorList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Term ::= Factor NT$12 MulopFactorList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj factor = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$12 ::= 
            {
              Obj RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj factor = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 RESULT = factor; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$12",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // AddopTermList ::= 
            {
              Obj RESULT =null;
		 RESULT = new Obj(Obj.Con, "", Tab.intType); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermList",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // AddopTermList ::= AddopTermList Addop NT$11 Term 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = term; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermList",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$11 ::= 
            {
              Obj RESULT =null;
 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= ExprMinusTerm AddopTermList 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int addopTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addopTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj addopTerm = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						
						if(term == null){
							s.sintaxError(termleft, "Tip je null!" );
						}/*else{
							if(term.getType().equals(addopTerm.getType()) && term.getType().equals(Tab.intType) &&  addopTerm.getType().equals(Tab.intType)){
								RESULT = term; // term = term + addopTerm
								s.sintaxInfo("Operacija + uspesna! Linija: " + termleft );
							 }else if(false){
								s.sintaxError(termleft, "Tipovi su nekombatibilni pri operaciji + - += -= , moraju biti int!" );
								RESULT = new Obj(Obj.Con, "", Tab.noType);
							}
						}*/
						RESULT = term;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExprMinusTerm ::= Term 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = term; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprMinusTerm",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ExprMinusTerm ::= MINUS Term 
            {
              Obj RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj term = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = term; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprMinusTerm",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ContFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ContFact",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ContFact ::= Expr Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ContFact",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CondFactList ::= ContFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CondFactList ::= CondFactList AND ContFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CondTerm ::= CondFactList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CondTermList ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CondTermList ::= CondTermList OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Condition ::= CondTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ActParsList ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ActParsList ::= ActParsList COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ActPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ActPars ::= ActParsList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DesignatorStatement ::= 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DesignatorStatement ::= Designator DEC 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DesignatorStatement ::= Designator INC 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DesignatorStatement ::= Designator LPAREN error RPAREN 
            {
              Obj RESULT =null;
			s.sintaxInfo("GRESKA (]): Lista parametra funkcije . ");	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DesignatorStatement ::= Designator LPAREN NT$10 ActPars RPAREN 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$10 ::= 
            {
              Obj RESULT =null;

							if(parser.isMain == true)
					 			parser.calledFuncMain++; 	
					 	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DesignatorStatement ::= Designator Assignop Expr 
            {
              Obj RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj designator = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						if((designator.getType().getKind() == Struct.Array && designator.getType().getElemType().equals(expr.getType())) ||
							((designator.getKind() == Obj.Var || designator.getKind() == Obj.Fld) && designator.getType().equals(expr.getType()))){
								RESULT = designator;
								s.sintaxInfo("Izvrena operacija =");
							}
							else{
								s.sintaxError(0,"Pri operaciji = nisu kompatiblini tipovi");
								RESULT = new Obj(Obj.Con, "", Tab.noType);
							}
							
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ElseStatement ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseStatement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ElseStatement ::= ELSE Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseStatement",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Statement ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
		 parser.blocks++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Statement ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI 
            {
              Object RESULT =null;
		
					 	 if(parser.isMain == true)
					 		parser.calledFuncMain++;
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Statement ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
					 	
					 	
					 	if(parser.isMain == true)
					 		parser.calledFuncMain++; 
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Statement ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;
		 
					 	if(parser.isMain == true)
					 		parser.calledFuncMain++; 
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Statement ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int exprObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj exprObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					 	returnFound = true; /* add return type */ 
					 	parser.returnType = exprObj.getType();
					 	if(!parser.returnType.equals(currentMethod.getType()))
			            s.semanticError(exprObjleft, "Funckija ocekuje povratnu vrednost " + s.getTypeName(currentMethod.getType().getKind()) + " , a vracena vrednost je tipa " + s.getTypeName(parser.returnType.getKind()));
					 	//System.out.println(s.getTypeName(parser.returnType.getKind()));
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Statement ::= RETURN SEMI 
            {
              Object RESULT =null;
		 
						 returnFound = true; 
						 parser.returnType = Tab.noType; 
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Statement ::= CONTINIUE SEMI 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 if(parser.forLoop <= 0) s.sintaxError(cleft , "Continue ne moze biti van for petlje" ); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Statement ::= BREAK SEMI 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 if(parser.forLoop <= 0) s.sintaxError(bleft , "Break ne moze biti van for petlje" ); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Statement ::= ForStatement error RPAREN Statement 
            {
              Object RESULT =null;
		
					 	parser.forLoop--;
					 	System.out.println("Smanjena dubina fora " + parser.forLoop);
			    	 	s.sintaxInfo("GRESKA () ;): Dekleracija designator statement, najverovatnije u for . ");	
			    	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Statement ::= ForStatement DesignatorStatement SEMI Condition SEMI DesignatorStatement RPAREN Statement 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.forLoop--; s.semanticDebug(stmtleft,"Smanjena dubina for petlje" + parser.forLoop); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Statement ::= IF LPAREN error RPAREN Statement ElseStatement 
            {
              Object RESULT =null;
		
			    	 	s.sintaxInfo("GRESKA ()): Dekleracija designator statement, najverovatnije u if uslovu. ");	
			    	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Statement ::= IF LPAREN Condition RPAREN Statement ElseStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Statement ::= error SEMI 
            {
              Object RESULT =null;
		
					 		
					 		if(parser.actParsList == true) 
					 			s.sintaxInfo("GRESKA (;): Lista parametra funkcije. ");
					 		else
					 			s.sintaxInfo("GRESKA (;): Dekleracija designator statement, najverovatnije pri dodeli vrednosti. ");
					 		
					 		
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Statement ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ForStatement ::= FOR NT$9 LPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int forloopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int forloopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object forloop = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStatement",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$9 ::= 
            {
              Object RESULT =null;
		int forloopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int forloopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object forloop = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 parser.forLoop++; s.semanticDebug(forloopleft,"Uvecana dubina for petlje " + parser.forLoop); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						Obj typeNode = Tab.find(typeName);
						if(typeNode == Tab.noObj){
							s.semanticError(typeNameleft, " Nije pronadjen tip : '" + typeName + "' u tabeli simbola ");
							RESULT = Tab.noType;
						}
						else {
							if(Obj.Type == typeNode.getKind()){
								RESULT = typeNode.getType();
							}
							else{
									s.semanticError(typeNameleft, " Ime: '" + typeName + "' ne predstavlja tip");
								RESULT = Tab.noType;
							}
						}
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ClassMethod ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethod",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ClassMethod ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethod",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ClassDecl ::= error LBRACE ClassBody RBRACE 
            {
              Object RESULT =null;
		
				    	
						parser.isClass = false;
						currentClass = Tab.noObj;
						s.sintaxInfo("GRESKA ({): Deklaracija prosirenja nadklase  (extends_).  ");
				    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ClassDecl ::= ClassDeclPreExt EXTENDS error LBRACE ClassBody RBRACE 
            {
              Object RESULT =null;
		
				    	
						parser.isClass = false;
						currentClass = Tab.noObj;
						s.sintaxInfo("GRESKA ({): Deklaracija prosirenja nadklase (extends).  ");
				    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ClassDecl ::= ClassDeclPreExt NT$8 LBRACE ClassBody RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
				
						Tab.chainLocalSymbols(currentClass.getType());
						Tab.closeScope();
						
						parser.isClass = false;
						currentClass = Tab.noObj;
						
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$8 ::= 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
	
					
						Obj temp = Tab.currentScope.findSymbol(className);
						currentClass = Tab.insert(Obj.Type, className, new Struct(Struct.Class)); 
						Tab.openScope();
					  	if(temp != null)
					  		s.sintaxError(classNameleft, "Ne moze da se ubaci klasa: '" + className + "' vec postoji u ovom scope" );
	
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ClassDecl ::= ClassDeclPreExt EXTENDS NT$6 Type NT$7 LBRACE ClassBody RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int extendClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int extendClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct extendClass = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
					
						Tab.chainLocalSymbols(currentClass.getType());
						Tab.closeScope();
						parser.isClass = false;
						currentClass = Tab.noObj;
						
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int extendClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int extendClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct extendClass = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

						Obj temp = Tab.currentScope.findSymbol(className);
						
					  	
	
						if(temp == null){
							if(extendClass.getKind() == Struct.Class){
								Struct s = new Struct(Struct.Class, extendClass);
								currentClass = Tab.insert(Obj.Type, className, s);
								Tab.openScope();
								Tab.insert(Obj.Fld, "$super" , extendClass);
							}else{
								s.sintaxError(extendClassleft, "Tip iz koje se izvodi klasa" + className +" nije klasnog tipa.");
								currentClass = Tab.noObj;
							}
						}else{	
							s.sintaxError(classNameleft, "Ne moze da se ubaci klasa: '" + className + "' vec postoji u ovom scope");
						}
						
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$6 ::= 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

					 parser.defInnerClass++;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ClassBody ::= VarDeclListE ClassMethod 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBody",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ClassDeclPreExt ::= CLASS NT$5 IDENT 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						RESULT = className;
						s.sintaxInfo("Obradjivanje nove klase '" + className + "' na liniji "  + classNameleft);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDeclPreExt",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$5 ::= 
            {
              String RESULT =null;
 parser.isClass = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FormalParamDecl ::= Type VarDef 
            {
              Object RESULT =null;
		int formalParamTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int formalParamTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct formalParamType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 s.formalParams(formalParamType); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FormalParamList ::= FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FormalParamList ::= error COMMA FormalParamDecl 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 s.methodError(fleft, ',', "Formalni parametar funkcije.");  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FormalParamList ::= FormalParamList COMMA FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FormPars ::= FormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodType ::= VOID 
            {
              Struct RESULT =null;
		 RESULT = Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodType",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodType ::= Type 
            {
              Struct RESULT =null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct returnType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = returnType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodType",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodStatic ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodStatic",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodStatic ::= STATIC 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 s.methodStaticClassCheck(stleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodStatic",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MethodDecl ::= MethodDeclPreVar VarDeclListE LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int methodEndleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodEndright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object methodEnd = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						s.methodReturn(methodEndleft);
						s.methodEnd();
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MethodDeclPreVar ::= MethodDeclPreFor error RPAREN 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
						methodErrorDetected = true;
						s.methodError(mleft, ')' , "Formalni parametar funkcije.");
					
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclPreVar",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MethodDeclPreVar ::= MethodDeclPreFor FormPars RPAREN 
            {
              Object RESULT =null;
		 currentMethod.setLevel(currMethodFormParams); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclPreVar",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodDeclPreFor ::= MethodStatic MethodType IDENT NT$4 LPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct returnType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 currMethodFormParams = 0; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclPreFor",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$4 ::= 
            {
              Object RESULT =null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct returnType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 					  
					 	s.insertMethodAndCount(methodNameleft, methodName, returnType);
					 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VarDef ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 	
			        	parser.isArray = false;
			        	s.variableCount();
						s.insertVariable(varNameleft, varName, false);				  
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDef",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VarDef ::= IDENT QLBRACE NT$3 QRBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 
						s.variableCount();
						parser.isArray = false;
						s.insertVariable(varNameleft, varName, true);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDef",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
 parser.isArray = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VarDecl ::= VarDef 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarDecl ::= error COMMA VarDef 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 s.variableError(vleft, ',', false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarDecl ::= VarDecl COMMA VarDef 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarDeclList ::= VarType error 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct v = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 s.variableError(vleft, '{', true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarDeclList ::= VarType error SEMI 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct v = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 s.variableError(vleft, ';', true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDeclList ::= VarType VarDecl SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarType ::= Type 
            {
              Struct RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.lastVarType = varType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarType",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDeclListE ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclListE",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDeclListE ::= VarDeclListE VarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclListE",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Value ::= ASCII 
            {
              Obj RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			        	Obj o = new Obj(Obj.Con, "CONSTANT", Tab.charType);
						o.setAdr(c.charAt(1));
						RESULT = o;
			        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Value ::= BOOL 
            {
              Obj RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			          
			        	Obj o = new Obj(Obj.Con, "CONSTANT", s.boolType);
						o.setAdr("true".equals(b) ?  1 : 0);
						RESULT = o;

			         
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Value ::= NUMBER 
            {
              Obj RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						Obj o = new Obj(Obj.Con, "CONSTANT", Tab.intType);
						o.setAdr(n);
						RESULT = o;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDef ::= IDENT EQUAL Value 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int constValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constValue = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
						s.constantCount();
					    s.insertConstant(constNameleft, constName, constValue);						 
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDef",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDecl ::= ConstDef 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDecl ::= ConstDecl COMMA ConstDef 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDeclList ::= CONST Type NT$2 ConstDecl SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int constTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int constTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct constType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 parser.lastConstType = Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =null;
		int constTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct constType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

						s.checkContantType(constTypeleft);
						parser.lastConstType = constType;
						
						
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ProgramElem ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElem",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ProgramElem ::= VarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElem",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ProgramElem ::= ConstDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramElem",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgramDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgramDeclList ::= ProgramDeclList ProgramElem 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramDeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgramName ::= IDENT 
            {
              Obj RESULT =null;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						RESULT = Tab.insert(Obj.Prog, programName, Tab.noType); // Dodaj objektni cvor u Tablu simbola za Program
						Tab.openScope();					                    // Otvori program scope  
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramName",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= PROGRAM NT$0 ProgramName ProgramDeclList LBRACE NT$1 MethodDeclList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int programObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int programObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj programObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		 
						s.checkMain();
						s.program_action(programObj);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int programObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int programObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj programObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
 parser.isGlobal = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.isGlobal = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

