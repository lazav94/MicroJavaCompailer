package pp1.vl130298;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import java.util.UUID;
import rs.etf.pp1.mj.runtime.Code;


import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Stack;
import java.util.LinkedList;



init with {:
		     Singleton s = Singleton.getInstance();
		     s.initSymbolTable();
		  :}
		  
scan with {:
			  Singleton s = Singleton.getInstance();
		      Symbol symbol = this.getScanner().next_token();
			      if (symbol != null && symbol.value != null) 
				      s.log.info(symbol.toString() + " " + symbol.value.toString());
			  return symbol;
		  :}

parser  code {:

				// Predefinisane metode za ispis poruke 
				
				public void report_fatal_error(String message, Object info) throws java.lang.Exception {
     			    done_parsing();
      			    report_error(message, info);
    			}
  
			    public void syntax_error(Symbol cur_token) {
			        report_error("Sintaksna greska na liniji " + cur_token.left  , cur_token);
			    }
			  
			    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
			        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
			    }
			    
			    
			     public void report_error(String message, Object info) {
			    	errorDectected = true;
			    	s.log.error(message);
			    }
			    
			    public void report_info(String message, Object info) {
			        s.log.info("WTF info (search in cup)");	
			    }
    
				Singleton s = Singleton.getInstance();
			   

				Struct lastConstType = Tab.noType;
				Struct lastVarType = Tab.noType;
				
				Stack<Obj> lastDesignator = new Stack<Obj>();
				Obj assignopDesignator;

				int globalVariables     = 0; // definicija globalnih promenljivih  -> ako se nalazi u globalnom opsegu definicije promenljivih
				int localMainVariables  = 0; // definicija lokalnih promeljivih (u main funkciji)
				int globalConstants     = 0; // definicije globalnih konstanti
				

				int methods             = 0; // definicija globalniih i statickih funkicja unutrasnjih klasa
				int calledFuncMain      = 0; // poziv funkicje u telu metode main
				int fomalArgMeth        = 0; // delaracija formalnih argumenata funkcije 
		
				int defInnerClass 		= 0; // definicjije unutrasnjih klasa
				int defInnerClassMeth   = 0; // defiicije metoda unutrasnjih klasa
				int dekFieldsInnerClass = 0; // deklaracija polja unutrasnjih klasa
	
				boolean isArray      = false,      // Flag: da li se radi o nizu
						isGlobal     = false,      // Flag: true - ako smo u globalnom opsegu programa
						isClass      = false,      // Flag: true - ako smo unutar klase
						isMain       = false,      // Flag: true - ako smo nekad naisli na main metodu (void main())
						isStatic     = false,      // Flag: true - ako je trenutna metoda static (samo za klase)
						isStaticFld  = false,      // Flag: true - ako je trenutno polje static  (samo za klase)
						isMethod      = false,	   // Flag: true - ako smo unutar metode
						isDot		 = false,      // Flag: true - pojavila se tacka (unused)
						isArrayElem  = false;      // Flag: true - ako obradjuemo element niza
			
			
				boolean isAssign     = false;      // da li se radi dodela vrednosti
				boolean actParsList  = false;
				int forLoopLevel      = 0;              // Nivo ugnezdenosti for petlje (0 - ako se ne nalazimo u for petlji)
	
				
	
				boolean errorDectected = false;   // Flag: true - u slucaju bilo kakve greske
				
				Struct returnType = null;
				
				
			 :} 
action code {: 
				Singleton s = Singleton.getInstance();
				
				// Method variables
				
				Obj currentMethod        = null;    // ima informaciju o funkciji koja se trenutno obradjuje
				int currMethodFormParams = 0;       // broj formalnih parametra funckije
				
				List<Obj> FormalParamStack = new ArrayList<Obj>();
						
						
				List<Obj> MehtodWithVarArgs = new ArrayList<>();
				Stack<Obj> currentMethodStack = new Stack<Obj>();
				
				Stack<List<Obj>> varArgsStack  = new Stack<List<Obj>>();
				
				
				boolean haveVarArgs = false;
				Struct varArgsType = Tab.noType;
				
				boolean haveMain = false;    // da li imamo main fju u programu
				boolean returnFound = false; // koristi se kada fja treba da vrati vredonost !
				
				
  				// Class varialbes
				Obj currentClass    = null;    // ima informaciju o klasi koja se trenutno obradjuje
				HashMap<Struct, List<Obj>> staticFldMap = new HashMap<>();
				Struct parentClass = null;
			
				
				boolean isActPar = false;
				
				Obj prevCondFact = null;
				Obj prevCondTerm = null;
				boolean methodErrorDetected = false; // da li se desila greska kod parsiranja metoode
				
				
				
				/* CONDITION */
				LinkedList<Integer> condFactJumps 			= new LinkedList<Integer>();
				LinkedList<Integer> condTermJumps 			= new LinkedList<Integer>();
				LinkedList<LinkedList<Integer>> elseAdr 	= new LinkedList<LinkedList<Integer>>();
				LinkedList<Integer> afterElseAdr 			= new LinkedList<Integer>();
				LinkedList<LinkedList<Integer>> breakJump	= new LinkedList<LinkedList<Integer>>();
				LinkedList<Integer> currBreakJump 		    = new LinkedList<Integer>();
				LinkedList<Integer> continueJump 			= new LinkedList<Integer>();
				
				int forConditionStartAdr;
				int currentRelop;
				int forStepAdr;
	
				
				
				/* associativity*/
				Stack<Stack<Integer>>    opStack = new Stack<Stack<Integer>>();
				Stack<Obj> objStack = new Stack<Obj>();
				
				LinkedList<Obj> arrayStack = new LinkedList<Obj>();
				boolean isLonlyFactor = false;
				boolean isLonlyTerm = false;
				
				
				boolean onStack = false;
							
				
				
	 :}

// Terminals
terminal PROGRAM, CLASS, EXTENDS, STATIC, VOID, CONST;
terminal FOR, BREAK, CONTINIUE, IF, ELSE, PRINT, READ, NEW, RETURN;
terminal EQUAL, PLUS, MINUS, MUL, DIV, MOD, EQU, NEQ, LSS, LEQ, GTR, GEQ, AND, OR, PEQ , MEQ, MUEQ, DEQ, MOEQ, INC, DEC;
terminal SEMI, COMMA , LPAREN, RPAREN, LBRACE, RBRACE, QLBRACE, QRBRACE, DOT;

terminal Integer NUMBER;
terminal String  IDENT ,BOOL ,ASCII;


// Non terminals
non terminal Program, ProgramDeclList,ProgramElem ;
non terminal ClassDecl, ClassMethod,  ClassBody, ClassStatic, ClassVarDecl, ClassVarDeclList;
non terminal ConstDeclList, ConstDecl, ConstDef;
non terminal VarDeclList, VarDecl , VarDeclListE  ;
non terminal MethodDeclList, MethodDecl, MethodStatic, MethodDeclPreVar, MethodDeclPreFor, VarArgs;
non terminal FormPars, FormalParamList, FormalParamDecl;
non terminal Statement, StatementList, ForStatement ,ElseStatement ;
non terminal ActPars, ActParsList ;


non terminal Integer Addop, Mulop, Assignop, Relop, AddopLeft, AddopRight,  MulopLeft, MulopRight;
non terminal Obj VarDef;
non terminal String ClassDeclPreExt;
non terminal Obj ProgramName, Value;
non terminal Struct Type, VarType, MethodType ;
non terminal Obj  Designator, Expr, Factor, Term,DesignatorIdent, AddopTermList, DesignatorList, DesignatorElem;
non terminal Obj  DesignatorStatement,DesignatorLParen;
non terminal Obj  Condition, CondTerm, CondFact, ConditionEps;
non terminal Obj MulopFactorList;

precedence left ELSE;

//=====================================================================================================//
//------------------------------------------------NIVO A-----------------------------------------------//
//=====================================================================================================//
// #Definition, counting and error recovery @* 
// @Program
// @Constants [Definition constants & Counting]
// @Variables [Definiton global and local variables and arrays & Counting]

//-----------------------------------------------PROGRAM-----------------------------------------------//

Program 		::= PROGRAM 
					{: parser.isGlobal = true; :}
					ProgramName:programObj ProgramDeclList LBRACE  
					{: parser.isGlobal = false; :} 
					MethodDeclList 
					RBRACE
					{: 

						s.checkMain();
						s.programEnd(programObj);
						
					:} ;

ProgramName     ::= IDENT:programName 
					{:
						RESULT = s.programStart(programName);
					:};

ProgramDeclList ::= ProgramDeclList ProgramElem
					|
					/* epsilon */ 
					;

ProgramElem     ::= ConstDeclList // can't be epsilon
                    |
                    VarDeclList   // can't be epsilon
                    |
                    ClassDecl     // can't be epsilon
                    ;
 
 
//-----------------------------------------------CONTANTS-----------------------------------------------//               
ConstDeclList   ::= CONST Type:constType
					{:
						s.checkContantType(constTypeleft);
						parser.lastConstType = constType;
					:}
					ConstDecl SEMI 
					{: parser.lastConstType = Tab.noType; :} 
					;
					
				    
ConstDecl       ::= ConstDecl COMMA ConstDef
					|
					ConstDef
					;
				    
ConstDef        ::= IDENT:constName EQUAL Value:constValue
					{: 
						s.constantCount();
					    s.insertConstant(constNameleft, constName, constValue );						 
					:} ;

Value           ::= NUMBER:n
					{: 
						Obj o = new Obj(Obj.Con, "Constant number", Tab.intType);
						o.setAdr(n);
						RESULT = o;
					:}
			        |
			        BOOL:b
			        {:
			         	Obj o = new Obj(Obj.Con, "Constant boolean" , s.boolType);
			          	o.setAdr((b.equals("false"))? 0 : 1);
						RESULT = o;

			         :}
			        |
			        ASCII:c
			        {: 
			        	Obj o = new Obj(Obj.Con, "Constant char", Tab.charType);
						o.setAdr(c.charAt(1));
						RESULT = o;
			        :}
			        ;
			        
 
//-----------------------------------------------VARIABLES-----------------------------------------------//	

VarDeclListE    ::= VarDeclListE VarDeclList 
					|
					/* epsilon */
					;

VarType         ::= Type:varType          {: parser.lastVarType = varType; :} ;	
				
VarDeclList     ::= VarType VarDecl SEMI  
					|
					VarType:v error SEMI  {: s.variableError(vleft, ';', true); :}
					|
					VarType:v error       {: s.variableError(vleft, '{', true); :}
					;
					
VarDecl         ::= VarDecl COMMA VarDef 
				    |
				    error COMMA:v VarDef  {: s.variableError(vleft, ',', false); :}
				    |
				    VarDef    
				    ;
					   
VarDef          ::= IDENT:varName QLBRACE {: parser.isArray = true; :}
					QRBRACE
					{: 
						s.variableCount();
						RESULT = s.insertVariable(varNameleft, varName);
						parser.isArray = false;
						
					:}
			        |
			        IDENT:varName
			        {: 	
			        	parser.isArray = false;
			        	s.variableCount();
						RESULT = s.insertVariable(varNameleft, varName);		
								  
					:}
			        ;
		

//=====================================================================================================//
//------------------------------------------------NIVO B-----------------------------------------------//
//=====================================================================================================//
// #Definition, counting and error recovery @* 
// @Method
// @FormalParamethers
				  
                 
//----------------------------------- Methods -----------------------------------// can be epsilon
MethodDeclList  ::= MethodDeclList MethodDecl
				    |
				    /* epsilon */
				    ;
				    
MethodDeclPreFor::=  MethodStatic MethodType:returnType IDENT:methodName 
					 {: 					  
					 	s.insertMethodAndCount(methodNameleft, methodName, returnType);
					 	
					 :}
					LPAREN  
					{: 
						// TODO notused?
						currMethodFormParams = 0; 
					:}
				    ; 


MethodDeclPreVar::= MethodDeclPreFor FormPars RPAREN
					{:
						
					 	if(haveVarArgs){
					 		MehtodWithVarArgs.add(currentMethod);	
					 		currentMethod.setLevel(currMethodFormParams + 1);
					 	}
					 	else
					 		currentMethod.setLevel(currMethodFormParams);
					 	
					:}
					|
					MethodDeclPreFor:m error RPAREN 
					{:
						methodErrorDetected = true;
						s.methodError(mleft, ')' , "Formalni parametar funkcije.");
					
					:}
					;
				   									 
MethodDecl      ::= MethodDeclPreVar:line VarDeclListE LBRACE
					{:
						s.methodEnter();	
					:}
					StatementList RBRACE:methodEnd 
					{: 
						s.methodExit();
						s.methodReturnCheck(methodEndleft);
						s.methodEnd();
					:} 
					; 

MethodStatic    ::= STATIC:st {: s.staticCheck(stleft); :}
				    |
				    /* epsilon */
				    {: parser.isStatic = false; :}
				    ;
				    
			   
MethodType      ::= Type:returnType {: RESULT = returnType; :} 
				    |
				    VOID  {: RESULT = Tab.noType; :} 
				    ;
				    

//---------------------------------- Formal Paramethers ----------------------------------// can be epsilon                  				  


FormPars        ::= FormalParamList 
					{: haveVarArgs = false; :}
					| 
					VarArgs
					{:
						haveVarArgs = true;
					:}
					|
					FormalParamList COMMA VarArgs
					{: haveVarArgs = true; :}
					|
					/* epsilon */ 
					{: haveVarArgs = false; :}
					;
					
FormalParamList ::= FormalParamList COMMA FormalParamDecl
					|
				    error COMMA FormalParamDecl:f {: s.methodError(fleft, ',', "Formalni parametar funkcije.");  :}
				    | 
				    FormalParamDecl
				    ;
				    
FormalParamDecl ::= Type:type 
					{: parser.lastVarType = type; :} 
					VarDef:formParm  
					{: s.formalParams(formParm); :};
				    
				    
VarArgs 		::= Type:type {: varArgsType = type; :} 
					DOT DOT DOT 
					IDENT:varArgsName
					{: 	Tab.insert(Obj.Var, varArgsName , new Struct(Struct.Array, varArgsType)); :} 
					;
				    

				    
				   

//=====================================================================================================//
//------------------------------------------------NIVO C-----------------------------------------------//
//=====================================================================================================//
// #Definition, counting and error recovery @*
// @Class



//----------------------------------- Class	----------------------------------// can't be epsilon	    

ClassDeclPreExt ::= CLASS IDENT:className
					{:
						RESULT = s.classStart(className, classNameleft);
					:};
					
ClassBody       ::= ClassVarDeclList  ClassMethod 
					|
					ClassVarDeclList 
					|
					ClassMethod
					|
					/* epsilon */
					;
					
ClassDecl       ::= ClassDeclPreExt:className EXTENDS 
					Type:extendClass
					{:
						s.classExtendCheck(className, extendClass, extendClassleft);
					:}
					LBRACE ClassBody RBRACE {: s.endClass(); :}
					
					|
					ClassDeclPreExt:className {: s.addClass(className, classNameleft); :}
					LBRACE ClassBody RBRACE   {: s.endClass(); :}
				    |
				    ClassDeclPreExt EXTENDS  error LBRACE ClassBody RBRACE {: s.classError(); :}
				    |			
				    error   LBRACE ClassBody RBRACE {: s.classError();  :}
				    
					;
					

ClassMethod     ::= LBRACE MethodDeclList RBRACE
				    ;
				    
				    
ClassStatic     ::= STATIC 
					{: parser.isStaticFld = true; :}
				    |
				    /* epsilon */
				    {: parser.isStaticFld = false; :}
				    ;
				    
ClassVarDecl	::= ClassStatic VarDeclList 
					{: parser.isStaticFld = false; :}
					;
					
ClassVarDeclList::= ClassVarDeclList ClassVarDecl 
					|
					ClassVarDecl 
					;
				    

//=====================================================================================================//
//-----------------------------------------------GENERAL-----------------------------------------------//
//=====================================================================================================//
// @Type
// @Statement
// @Designator Statement { Designator }
// @Actual Parameters
// @Condition { Condition Term, Condition Factor}


Type          ::=  	IDENT:typeName {: RESULT = s.insertType(typeName, typeNameleft); :}
				 	; 
                  
StatementList   ::= StatementList Statement 
				    |
				    /* epsilon */ 
				    ;

ForStatement    ::=  FOR:forloop  
					 {: 
					 	parser.forLoopLevel++; 
					 	s.semanticDebug(forloopleft,"Uvecana dubina for petlje, dubina = " + parser.forLoopLevel); 
					 :}	
					 LPAREN
					;	     
				
Statement       ::=   READ LPAREN Designator:designator
					  {:
					     RESULT = s.statementRead(designator, designatorleft);
					     s.read(designator);
					 :}
					  RPAREN SEMI
					 |
					 DesignatorStatement SEMI
					 |
					 error SEMI
					 {:
					 		
					 		if(parser.actParsList == true) 
					 			s.sintaxInfo("GRESKA (;): Lista parametra funkcije. ");
					 		else
					 			s.sintaxInfo("GRESKA (;): Dekleracija designator statement, najverovatnije pri dodeli vrednosti. ");
					 			
					 :}
				     |
			    	 IF LPAREN Condition:cond
			    	 {:
					  	s.ifCondition();
			    	 :}
			    	 RPAREN Statement 
			    	 {:  
					 	s.ifAfterStatement();
					 :}
			    	 ElseStatement 
			    	 {:
						s.ifAfterElseStatement();			
			    	 :}
			    	 |
			    	 IF LPAREN error RPAREN Statement ElseStatement
			    	 {:
			    	 	s.sintaxInfo("GRESKA ()): Dekleracija designator statement, najverovatnije u if uslovu. ");	
			    	 :}
					 |
					 ForStatement DesignatorStatement SEMI
					 {: forConditionStartAdr = Code.pc; :}
					 ConditionEps SEMI
					 {: 
					 	s.forAfterCondition();
					 :} 
					 DesignatorStatement
					 {:
						 s.forAfterStep();
			  			
					 :} 
					 RPAREN Statement:stmt 
					 {: 
					 
					 	parser.forLoopLevel--;
						s.semanticDebug(stmtleft,"Smanjena dubina for petlje, dubina = " + parser.forLoopLevel); 
					 	s.forBodyEnd();
					 	
					 :}
					 |
					 ForStatement error RPAREN Statement 
					 {:
					 	parser.forLoopLevel--;
					 	s.semanticDebug("Smanjena dubina fora " + parser.forLoopLevel);
			    	 	s.sintaxInfo("GRESKA () ;): Dekleracija designator statement, najverovatnije u for . ");	
			    	 :}
					 |
					 BREAK:b
					  {: 
						 if(parser.forLoopLevel <= 0) s.sintaxError(bleft , "Break ne moze biti van for petlje" );
						 else{
				  		 	Code.putJump(0);
				  			if(breakJump == null || breakJump.isEmpty()){
				  				s.semanticError(bleft, "Break ne moze da skoci, ne zna gde");
				  				return null;
				  			}
							breakJump.peekFirst().add(new Integer(Code.pc - 2));
						} 
					:}
					SEMI 
					
					 |
					 CONTINIUE:c
					  {: 
					 	if(parser.forLoopLevel <= 0) s.sintaxError(cleft , "Continue ne moze biti van for petlje" ); 
					 	else {
					 		if (continueJump == null || continueJump.isEmpty()) {
								if (continueJump == null || continueJump.isEmpty()) {
									s.semanticError(cleft, "Continuiue ne moze da skoci, ne zna gde");
									return null;
								}
							}
							Code.putJump(continueJump.peek());
					 		}
					 :}
					 SEMI  
					 |
					 RETURN SEMI:retSemi {: 
					 
					       if(currentMethod == null)
					           s.semanticError(retSemileft, "Return ne sme postojati izvan tela metode");
					       if(!currentMethod.getType().equals(Tab.noType))
					           s.semanticError(retSemileft, "Funkcija: " + currentMethod.getName() + " ocekuje return [expr] , ne moze samo return!");
						 returnFound = true; 
						 parser.returnType = Tab.noType; 
						 s.methodExit();
						 
					 :} 
					 |
					 RETURN Expr:exprObj SEMI {:
					 	/**
					 	* (18) Tip neterminala <i> exprObj </i> mora biti ekvialentan <u>povratnom tipu</u> tekuce metode/glavne funkcije.
					 	*/
					      if(currentMethod == null)
					    	s.semanticError(exprObjleft, "Return ne sme postojati izvan tela metode (return[expr])");
					 	returnFound = true; /* add return type */ 
					 	parser.returnType = exprObj.getType();
					 	if(!parser.returnType.equals(currentMethod.getType()))
			            	s.semanticError(exprObjleft, "Funckija ocekuje povratnu vrednost " + s.getTypeName(currentMethod.getType().getKind()) + " , a vracena vrednost je tipa " + s.getTypeName(parser.returnType.getKind()));
						
						
						//Code.load(exprObj);
						 s.methodExit();
					 :} 
					 |
					
					 PRINT LPAREN Expr:expr 
					 RPAREN SEMI 
					 {: 
					 
					     RESULT = s.statementPrint(expr, exprleft);
					     s.print(expr, -1);

					 	
					 	if(parser.isMain == true)
					 		parser.calledFuncMain++; 
					 :}
					 |
					 PRINT LPAREN Expr:expr
					 {:
					 RESULT = s.statementPrint(expr, exprleft);
					 :} 
					 COMMA NUMBER:num RPAREN SEMI 
					 {:
					 	 
					 	 s.print(expr, num);
					 	 if(parser.isMain == true)
					 		parser.calledFuncMain++;
					 :}
					 |
					 LBRACE StatementList RBRACE			  
					 ; 
					  
ElseStatement   ::= ELSE {: 
						s.ifElse();
					:} Statement
				    |
				    /* epsilon */ 
				    ;
				    
DesignatorLParen    ::= Designator:designator {:  RESULT = designator; :}  LPAREN ;		
			  
DesignatorStatement ::= Designator:designator {: parser.assignopDesignator = designator; :} Assignop:op
						{: 
							
							if (op.intValue() > 101) {
								if (s.isArrayElem(designator))
									Code.put(Code.dup2);
								Code.load(designator);
							}
							
						:}
						Expr:expr
						{:
							RESULT = s.designatorAssignop(designator, expr, designatorleft);

							if(op.intValue() > 101)
								s.calculateOp(op.intValue(), null, null);
								
							Code.store(designator);
							
						:}
					    |
					    DesignatorLParen:designator 
					    {: 
							RESULT = s.checkMethodCallDesignator(designator, false, designatorleft);
					 	:}
					 	ActPars RPAREN
					 	{:
					 		RESULT = s.afterActParsMethod(designator,false, designatorleft);
					 	:}
					 	|
					 	DesignatorLParen error RPAREN
					 	{:	
					 		s.sintaxInfo("GRESKA (]): Lista parametra funkcije . ");	 
					 	:} 
					    |
					    Designator:designator INC
					    {:
					    	RESULT = s.designatorInc(designator,designatorleft);
					    	s.calculateOp(Code.inc, RESULT, false);
					    :}
					    |
					    Designator:designator DEC
					    {:
					   		RESULT = s.designatorDec(designator,designatorleft);
					   		s.calculateOp(Code.inc, RESULT, true);
					   	:}
					    |
					    /* epsilon */ 
					    ;

					    
ActPars 		::= ActParsList {: isActPar = false; :} 
				    |
					/* epsilon */
					;
					    
ActParsList     ::= ActParsList COMMA Expr:expr 
					{: 
						if(!parser.isMain && s.isMethodWithVarArgs(currentMethodStack.peek()))
							s.checkParam(expr,exprleft); 
						
						else if(!parser.isMethod || parser.isMain){
							s.checkParam(expr,exprleft); 
						}
					:}
					|
					Expr:expr  
					{:
						if(!parser.isMain && s.isMethodWithVarArgs(currentMethodStack.peek()))
							s.checkParam(expr,exprleft); 
						else
						if(!parser.isMethod || parser.isMain)
							s.checkParam(expr,exprleft); 	
					:} 
					;
						
ConditionEps::=		Condition | /* epsilon */; 
				    // Treba za for petlju
						
Condition	::= 	CondTerm:ct  OR
					{:
						RESULT = s.condTerm(ct, false);	
					:}
					Condition
					|
					CondTerm:ct                  
					{: 
						RESULT = s.condTerm(ct, true);
					:}
					;


// TODO Ako su condfact kompatibilni da li ima potrebe proveravati da je lista cond factova BOOL
					    
CondTerm	::= 	CondFact:condFact
					{:
						s.condFact();
					:}
					AND  CondTerm
					{:  RESULT = new Obj(Obj.Var, UUID.randomUUID().toString(), s.boolType); :}
					|
					CondFact:condFact                  
					{: RESULT = condFact;  :}
					;
						
CondFact		::= Expr:expr1 Relop:relop Expr:expr2
					{:
						RESULT = s.conditionFact(expr1, expr2, relop, expr1left);
					:}
					|
					Expr:expr
					{:
						RESULT = s.conditionFact(expr, null, -1, exprleft);
					   	
					   	// TODO pogledaj da li ovde treba da se gleda boolean (true false a ne int);
					    Obj o = new Obj(Obj.Con, "expr", Tab.intType);
						o.setAdr(0);
					    Code.load(o);
					:}
					;
					

			
Expr   			::=  MINUS AddopTermList:addopTerm
					{: 
						if(!s.isInt(addopTerm)){
							s.semanticError(addopTermleft, "Kod - (MINUS) expr, term mora biti tipa int, a ne: " + s.getTypeName(addopTerm.getType().getKind()));
							RESULT = Tab.noObj;
						}else{
							RESULT = s.exprEnd(addopTerm);
							s.calculateOp(Code.neg, null, null);
						}
					:}
					|
					{: opStack.push(new Stack<>()); :}
					AddopTermList:addopTerm
					{: 
						RESULT = s.exprEnd(addopTerm);
					:}
					;
											

AddopTermList   ::= AddopTermList:atl Addop:op
					{:
					
						s.addToStack(op, atl);
					:}
					Term:term
					{: 
						s.expr(atl, term, op, atlleft);
						
						if(op.intValue() < 101)	{	
							s.loadDelayedObj(term);
							s.calculateOp(op ,null,null);
						}
						RESULT = term;
						isLonlyTerm = false;
						
					:}
					|	
					Term:term
					{: 
						isLonlyTerm = true;
						RESULT = term; 
					:}
					;
						
						
Term			::= MulopFactorList:mfl 
					{: 
						 RESULT = mfl;
						/*if (isLonlyFactor)
							  RESULT = mfl; 
						else
							RESULT = new Obj(Obj.Var, "complex term", Tab.intType);
						*/
				
					:} ; 

MulopFactorList ::=  MulopFactorList:mfl  Mulop:op
					{:
				
						s.addToStack(op, mfl);
							
					:}
					 Factor:factor
					{:
						s.factor(factor, mfl, op, mflleft);
						
						if(op.intValue() < 101){
							s.loadDelayedObj(factor);
							s.calculateOp(op ,null,null);
						}
						isLonlyFactor = false;
						RESULT = mfl;
					:}
					|
					Factor:factor
					{: 
						isLonlyFactor = true;
						RESULT = factor;
						
					:}
					;
			
Factor      	::= Designator:designator 
					{:
						RESULT = designator;
						if(!s.isArrayElem(designator)){
							Code.load(designator);
							onStack = true;
						} else
							onStack = false;
					:}
					|
					Designator:func LPAREN
					{:
						RESULT = s.checkMethodCallDesignator(func, true,  funcleft);
					:}
					ActPars RPAREN
					{:
						RESULT = s.afterActParsMethod(func, true, funcleft);
					:}	
					|
					NUMBER:i
					{: 
						Obj c = new Obj(Obj.Con, "Constant factor nubmer", Tab.intType);
						c.setAdr(i.intValue());
						Code.load(c);
						RESULT = c;
						
					:}
					|
					ASCII:i
					{: 
						Obj c = new Obj(Obj.Con, "Constant factor char", Tab.charType);
						c.setAdr(i.charAt(1));
						Code.load(c);
						RESULT = c;
					:}
					|
				    BOOL:i
				    {:
				    	Obj c = new Obj(Obj.Con, "Constant factor bool" , s.boolType);
						c.setAdr((i.equals("true"))? 1 : 0);
						Code.load(c);
						RESULT = c;
				    :}
					|
					NEW Type:type
					{: 
						RESULT = s.factorNew(type,typeleft);
					:}
				    |
					NEW Type QLBRACE Expr:expr QRBRACE
					{:
					    RESULT = s.factorArray(expr, exprleft);
					:}
					|
					LPAREN 
					Expr:expr RPAREN
					{: 
						RESULT = expr; 
					:}
					;
						 
Designator  	::= DesignatorIdent:designator
					{: 
					   parser.lastDesignator.push(designator);						
					:}
					DesignatorList:designatorList 
					{: 
						if(designatorList.equals(Tab.noObj)) RESULT = designator;
						else RESULT = designatorList; 
						
					:}
					;

DesignatorList  ::= DesignatorList DesignatorElem:designator {: RESULT = designator;  :}
					|
					/* epsilon */
					{: RESULT = Tab.noObj; :}
					;
					
// TODO pogledaj trebaju li ovi flagovi	
DesignatorElem   ::=DesignatorIdent:designatorIden
					{:
						RESULT = designatorIden;
					:}
					|
					DOT 
					{: s.changeToGlobalScope(parser.lastDesignator.peek()); :} 
					DesignatorIdent:designatorIden 
					{: 
						
						RESULT = s.designatorDot(parser.lastDesignator.peek(), designatorIden, designatorIdenleft);
						s.resetScope();
						parser.lastDesignator.pop();
					:}
					|
					QLBRACE:q
					{:
						if(s.designatorArray(parser.lastDesignator.peek(), qleft)){
							 parser.isArrayElem = true;
							 RESULT = s.arrayAcces(parser.lastDesignator.peek());
						}
						else
							RESULT = Tab.noObj;
							
					:}
					Expr:expr
					{: 
						if(!s.exprArray( expr, exprleft))
							RESULT = Tab.noObj;
						parser.lastDesignator.pop();

					 :}
					QRBRACE 
					{: parser.isArrayElem = false; :}
					;
					
DesignatorIdent  ::= IDENT:symbolName
					 {:
					 	RESULT = s.designatorName(symbolName, symbolNameleft);
					 	s.staticAccess(RESULT, symbolNameleft);
					 :};
					 

//=====================================================================================================//
//----------------------------------------------Operators----------------------------------------------//
//=====================================================================================================//
// @Assign, Relation, Add, Sub, Multiplication, Div, Mod...					 
                       
Assignop         ::= EQUAL:e {: RESULT = new Integer(101); :}  
				     | 
				     AddopRight:ar {: RESULT = ar; :} 
				     | 
				     MulopRight:mr {: RESULT = mr; :} 
				     ; 

Relop			 ::= EQU {: RESULT = Code.eq; :} 
					 | 
					 NEQ {: RESULT = Code.ne; :} 
					 | 
					 LSS {: RESULT = Code.lt; :} 
					 | 
					 LEQ {: RESULT = Code.le; :} 
					 | 
					 GTR {: RESULT = Code.gt; :} 
					 | 
					 GEQ {: RESULT = Code.ge; :} 
					 ; 
            
Addop			 ::= AddopLeft:al {: RESULT = al;	:}	| AddopRight:ar {: RESULT = ar; :} ;   

AddopLeft		 ::= PLUS {: RESULT = Code.add;		:}	| MINUS {: RESULT = Code.sub;   :} ;

AddopRight		 ::= PEQ  {: RESULT = Code.add+100;	:}  | MEQ {: RESULT = Code.sub+100; :} ;          
        
Mulop			 ::= MulopLeft:ml {: RESULT = ml;	:}	| MulopRight:mr {: RESULT = mr; :} ;   

MulopLeft  		 ::= MUL {: RESULT = Code.mul;		:}  | DIV {: RESULT = Code.div; 	:} 	| MOD  {: RESULT = Code.rem;     :} ;

MulopRight		 ::= MUEQ {: RESULT = Code.mul+100; :} 	| DEQ {: RESULT = Code.div+100;	:}	| MOEQ {: RESULT = Code.rem+100; :} ;   
                  
    
     
                       

				    




 